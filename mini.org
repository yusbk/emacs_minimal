#+AUTHOR: Yusman Kamaleri
#+TITLE: Aturcare Emacs versi 26.1
#+DATE: 05 Jan 2019
#+OPTIONS: toc:nil
#+PROPERTY: header-args :comments org :catch yes :results silent :tangle yes

* Personalised settings
Untuk lihat fungsi kekunci terdapat pelbagai cara:
1. =M-x describe-key= atau =F1-k= / =C-h k= untuk dapatkan fungsi bagi kekunci.
2. =M-x describe-bindings= atau =C-h b= untuk tunjukkan semua kekunci kombinasi.
3. =M-x describe-function= atau =C-h f= untuk dapatakan kekunci dari fungsi yang diketahui.

Namakan fungsi =keluar=.

#+BEGIN_SRC emacs-lisp
(defun keluar ()
  "Keluar dari fungsi."
  (interactive)
  (setq quit t))
#+END_SRC

** Personal folder
#+begin_src emacs-lisp
  (setq ybk-personal-dir "H:/emacs_private")
  (unless (file-exists-p ybk-personal-dir)
    (make-directory ybk-personal-dir))


#+end_src

** Saiz kolom
Saiz untuk sebaris atau kolom ialah 85 =(fill-column)= tetapi sekiranya ingin menukarkan ke saiz
lain, boleh pakai =set-fill-column= menggunakan =C-:= (asal kekunci ialah C-x f tapi
depakai untuk *Origami*).

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-:") 'set-fill-column)
#+END_SRC

** Personal keymap [F6]
Setup a personal keymap. I'll bind various things to this later on:
#+BEGIN_SRC emacs-lisp :tangle no
(bind-keys :prefix "<f6>"
           :prefix-map ybk/map)

(bind-key "q" #'keluar 'ybk/map)
;;(bind-key "q" #'quit 'ybk/map)
#+END_SRC

** Prog keymap [F12]
Setup utk keymap berkaitan dengan programming
#+BEGIN_SRC emacs-lisp :tangle yes
(bind-keys :prefix "<f12>"
           :prefix-map ybk/prog-map)

(bind-key "q" #'keluar 'ybk/prog-map)
#+END_SRC

** Move keymap [F2]
Keymap utk pergerakkan
#+BEGIN_SRC emacs-lisp :tangle yes
(bind-keys :prefix "<f2>"
           :prefix-map ybk/move-map)

(bind-key "q" #'keluar 'ybk/move-map)
#+END_SRC

** Org keymap [F10]
Keymap utk berkaitan dengan Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f10>"
             :prefix-map ybk/org-map )

  (bind-key "q" #'keluar 'ybk/org-map)
#+END_SRC

** R keymap [F9]
Keymap untuk penggunaan berkaitan ESS-R. Cuma aktiv di =ess-mode=
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f9>"
             :prefix-map ybk/r-map )

  (bind-key "q" #'keluar 'ybk/r-map)

#+END_SRC

** Misc keymap [F5]
Fungsi lain yang berguna dan perlukan singkatan
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f5>"
             :prefix-map ybk/misc-map)

  (bind-key "q" #'keluar 'ybk/misc-map)
#+END_SRC

** Search keymap C-s

#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "C-s"
             :prefix-map ybk/search-map)

  ;; (bind-key "q" #'keluar 'ybk/search-map)
#+END_SRC

* My init file
GÃ¥ til min emacs oppsett fil
#+BEGIN_SRC emacs-lisp
(defun ybk-emacs-file ()
  "Open my emacs org file"
  (interactive)
  (find-file (concat portable-emacs-dir "mini.org")))

(global-set-key (kbd "C-x y") 'ybk-emacs-file)
#+END_SRC

* Cache
I set up a cache folder in my =.emacs.d= folder so that it's not quite as crowded:

#+BEGIN_SRC emacs-lisp
  (defvar ybk/emacs-cache (concat portable-emacs-dir "cache\\")
    "Folder to store cache files in. Should end with a forward slash.")
#+END_SRC

Save a few misc files in the =cache= directory. Create =customize.el= file if doesn't exist

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat ybk/emacs-cache "customize.el"))

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
  (load custom-file)
  ;;(setq bookmark-default-file (concat ybk/emacs-cache "bookmarks"))
  ;;(setq recentf-save-file (concat ybk/emacs-cache "recentf")) ;sama dengan pkg "recentf"

#+END_SRC

* Backup and auto-save files
Aturcara untuk fial-fail backup
** Backup settings
Setiap fail akan di backup bila fail di simpan /(save)/ dan versi sebelumnya disimpan
dengan meletakkan simbol =~= dinama fail contohnya fail =nama~= bila fail =nama=
disimpan. Fail-fail ini disimpan di folder ~backups~ supaya tidak terselerak di folder utama.

#+BEGIN_SRC emacs-lisp
  ;; simpan auto-save di direktori "backups"
  (setq backup-directory-alist
        `((".*" . ,(concat temporary-file-directory "/backups"))))

  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t       ; deleted file goes to ~/.local/share/Trash/files
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made
        kept-new-versions 6               ; newest versions to keep when a new numbered backup is made
        )
  (setq vc-make-backup-files t) ;;  backup versioned files, which Emacs does not do by default
#+END_SRC

** Auto-save
Fail-fail yang sedang dibuka akan disimpan setiap saat atau setiap tambahan huruf
dibuat. Fail-fail seperti =#nama#= disimpan sekiranya fail yang tersebut berubah
tetapi tidak disimpan. Bila fail disimpan /(save)/ maka fail auto-save akan dipadam
secara automatik.

#+BEGIN_SRC emacs-lisp
  ;; buat direktori utk auto-save
  (defvar ybk-auto-save (concat temporary-file-directory "/autosave/"))
  (unless (file-exists-p ybk-auto-save)
    (make-directory ybk-auto-save))

  ;; simpan auto-save di direktori "backups"
  (setq auto-save-file-name-transforms
        `((".*" ,(concat temporary-file-directory "/autosave") t)))

  ;; ;; matikan autosave
  ;; (setq auto-save-default nil)
#+END_SRC

* Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :config
    (progn
      (setq hydra-lv nil) ;guna echo area
      ;; (set-face-attribute 'hydra-face-red      nil :foreground "Red"        :bold t)
      ;; (set-face-attribute 'hydra-face-blue     nil :foreground "RoyalBlue3" :bold t)
      ;; (set-face-attribute 'hydra-face-amaranth nil :foreground "#e52b50"    :bold t)
      ;; (set-face-attribute 'hydra-face-pink     nil :foreground "HotPink1"   :bold t)
      ;; (set-face-attribute 'hydra-face-teal     nil :foreground "#367588"    :bold t)
      (hydra-add-font-lock)))
#+END_SRC

* Kekunci
** Ringkasan kekunci
Senarai kekunci yang dipakai

|---------+----------------------|
| Kekunci | Fungsi               |
|---------+----------------------|
| jm      | Menu utama           |
| jt      | Terminal             |
| jw      | Penulisan/Word       |
| js      | Knitr/Sweave         |
| jx      | Debug code           |
| jj      | Movement             |
| jc      | Programming          |
| jf      | Find file            |
| jg      | Git                  |
| jl      | Launch Shiny App     |
|         |                      |
| qq      | Todo                 |
| qw      | Browse URL at browse |
|         |                      |

** Key chord
Untuk membuat kekunci singkatan dengan hanya dua huruf. Rujukan [[http://www.emacswiki.org/emacs/key-chord.el][Key Chord Mode]]
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1)
    ;; Max time delay between two key presses to be considered a key chord
    (setq key-chord-two-keys-delay 0.2) ; default 0.1

    ;; Max time delay between two presses of the same key to be considered a key chord.
    ;; Should normally be a little longer than `key-chord-two-keys-delay'.
    (setq key-chord-one-key-delay 0.3) ; default 0.2
    )
#+END_SRC

John Cook's post http://www.johndcook.com/blog/2015/02/01/rare-bigrams/
provides a list of rare bi-grams that would work great for key-chords.

Below list is based off that after removing all the key-chord duplicates
like `xs' and `sx'.

fb
gb gp
jj  jc jf jg jh jk jl jm jp jq js jt jv jw jx jy jz
kk
qq  qb qf qg qh qk ql qm qp qt qv qw qx qy qz
vv  vc vf vg vh vk vm vp vw vz
ww
xb xd xg xk xm xs xw
yy
zb zd zf zg zk zm zp zs zw zx

** Key sequence
Pakej =key-seq= dipakai untuk memastikan turutan kekunci sebelum mengaktifkan
fungsi. Ia bergantung pada pakej =key-chord=. Untuk rujukan boleh baca di [[https://github.com/vlevit/key-seq.el][GitHub]].

Dua fungsi yang boleh dipakai iaitu:

#+BEGIN_EXAMPLE
(key-seq-define-global "qd" 'dired)
(key-seq-define text-mode-map "qf" 'flyspell-buffer)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package key-seq
    :ensure t
    :after key-chord)
#+END_SRC

* Build-in settings
** Saiz kolom
Saiz untuk sebaris atau kolom ialah 85 =(fill-column)= tetapi sekiranya ingin menukarkan ke saiz
lain, boleh pakai =set-fill-column= menggunakan =C-:= (asal kekunci ialah C-x f tapi
depakai untuk *Origami*).

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-:") 'set-fill-column)
#+END_SRC

** Personal keymap [F6]
Setup a personal keymap. I'll bind various things to this later on:
#+BEGIN_SRC emacs-lisp :tangle no
  (bind-keys :prefix "<f6>"
             :prefix-map ybk/map)

  (bind-key "q" #'keluar 'ybk/map)
  ;;(bind-key "q" #'quit 'ybk/map)
#+END_SRC

** Prog keymap [F12]
Setup utk keymap berkaitan dengan programming
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f12>"
             :prefix-map ybk/prog-map)

  (bind-key "q" #'keluar 'ybk/prog-map)
#+END_SRC

** Move keymap [F2]
Keymap utk pergerakkan
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f2>"
             :prefix-map ybk/move-map)

  (bind-key "q" #'keluar 'ybk/move-map)
#+END_SRC

** Org keymap [F10]
Keymap utk berkaitan dengan Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f10>"
             :prefix-map ybk/org-map )

  (bind-key "q" #'keluar 'ybk/org-map)
#+END_SRC

** R keymap [F9]
Keymap untuk penggunaan berkaitan ESS-R. Cuma aktiv di =ess-mode=
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f9>"
             :prefix-map ybk/r-map )

  (bind-key "q" #'keluar 'ybk/r-map)

#+END_SRC

** Misc keymap [F5]
Fungsi lain yang berguna dan perlukan singkatan
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f5>"
             :prefix-map ybk/misc-map)

  (bind-key "q" #'keluar 'ybk/misc-map)
#+END_SRC

** Search keymap C-s

#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "C-s"
             :prefix-map ybk/search-map)

  ;; (bind-key "q" #'keluar 'ybk/search-map)
#+END_SRC

** Page Navigation
Sesuai bila banyak mukasurat
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-page (ctl-x-map "" :pre (widen))
    "page"
    ("]" forward-page "next")
    ("[" backward-page "prev")
    ("n" narrow-to-page "narrow" :bind nil :exit t))
#+END_SRC

** Key chord
Untuk membuat kekunci singkatan dengan hanya dua huruf. Rujukan [[http://www.emacswiki.org/emacs/key-chord.el][Key Chord Mode]]
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1)
    ;; Max time delay between two key presses to be considered a key chord
    (setq key-chord-two-keys-delay 0.2) ; default 0.1

    ;; Max time delay between two presses of the same key to be considered a key chord.
    ;; Should normally be a little longer than `key-chord-two-keys-delay'.
    (setq key-chord-one-key-delay 0.3) ; default 0.2
    )
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package key-seq
    :ensure t
    :after key-chord)
#+END_SRC

** Cancel
Buat [ESC] key utk batal proses sama seperti =C-g=. Diambil dari [[https://www.emacswiki.org/emacs/CancelingInEmacs][EmacsWiki]]
#+BEGIN_SRC emacs-lisp
  (define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
  (define-key isearch-mode-map "\e" 'isearch-abort)   ;; \e seems to work better for terminals
  (global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
#+END_SRC

** Face attribute
Tetapkan face attribute terutama untuk premable di org-mode. Diambil di [[https://emacs.stackexchange.com/questions/22584/disable-enlarged-org-mode-header-appearance][sini]].

#+BEGIN_SRC emacs-lisp
  ;;== Title font size size biasa
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-document-title ((t (:foreground "#FFB266" :weight bold :height 1.0)))) ;;#ffc58f
   )
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Consolas" :height 120)
#+END_SRC

** Font-lock
Minor mode untuk highlight ("fontify") menggunakan pelbagai /faces/. Hidupkan
globally sekiranya mode yang dipakai support fontify.
#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode 1)
#+END_SRC

** Yes/No
Hanya pakai 'y' atau 'n' untuk 'Yes' dan 'No'
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Elisp test dan message permulaan
Mulakan tanpa startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  ;; (setq initial-major-mode #'org-mode)
  (setq initial-scratch-message "# Untuk nota2 sementara yang tidak perlu disimpan\n\n")

  ;; Untuk evaluasi lisp seperti C-x C-e
  (define-key lisp-interaction-mode-map (kbd "<C-return>") 'eval-last-sexp)
#+END_SRC

** Start maximized
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Bunyi beep
Matikan bunyi beep
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Help window
Bila guna =C-h f=, =C-h v=, =C-h k= dan lain2 utk back dokument, fungsi ini menukarkan fokus ke windows tersebut
#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC
** Kill buffer
Tidak perlu sahkan utk matikan buffer yang sedang berfungsi cth bila buka ESS
#+BEGIN_SRC emacs-lisp
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))
#+END_SRC
** Sembunyikan tetikus
Sembunyikan tetikus masa menaip
#+BEGIN_SRC emacs-lisp
  (setq make-pointer-invisible t)
  ;;Letakkan di upper right corner bila tekan a key
  (mouse-avoidance-mode 'banish)
#+END_SRC
** Komen region
Kommen line tanpa perlu highlight seperti menggunakan
~comment-or-uncommment-region~. Barisan yang ada kursor akan di komen. Cara ini
diambil dari [[  (global-set-key (kbd "M-'") 'comment-or-uncomment-region)][StackOverflow]]

#+BEGIN_SRC emacs-lisp
  (defun comment-eclipse ()
    (interactive)
    (let ((start (line-beginning-position))
          (end (line-end-position)))
      (when (or (not transient-mark-mode) (region-active-p))
        (setq start (save-excursion
                      (goto-char (region-beginning))
                      (beginning-of-line)
                      (point))
              end (save-excursion
                    (goto-char (region-end))
                    (end-of-line)
                    (point))))
      (comment-or-uncomment-region start end)))

  (global-set-key (kbd "M-'") 'comment-eclipse)
#+END_SRC

** Scrolling
*** Cursor move 10 lines
Diambil dari [[http://whattheemacsd.com/key-bindings.el-02.html][What the emacs.d]]

#+BEGIN_SRC emacs-lisp
  ;; Move more quickly
  (global-set-key (kbd "C-S-n")
                  (lambda ()
                    (interactive)
                    (ignore-errors (next-line 10))))

  (global-set-key (kbd "C-S-p")
                  (lambda ()
                    (interactive)
                    (ignore-errors (previous-line 10))))

  (global-set-key (kbd "C-S-f")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-char 10))))

  (global-set-key (kbd "C-S-b")
                  (lambda ()
                    (interactive)
                    (ignore-errors (backward-char 10))))
#+END_SRC

Insert newline if point at the end of the buffer

#+BEGIN_SRC emacs-lisp
  (setq next-line-add-newlines t)
#+END_SRC

** Tab
Aturcara bagaimana =TAB= berfunksi

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 85)
  (setq-default default-tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC
** Cursor
*** Blink
Tidak blink
#+BEGIN_SRC emacs-lisp
  (when (functionp 'blink-cursor-mode)
    (blink-cursor-mode -1))
#+END_SRC

** Indent
[[https://github.com/Malabarba/aggressive-indent-mode][Agrressive indent]] keep code align even after rearranging stuff. Dimatikan globally sebab
confict dengan ~Polymode~ code chuck.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package aggressive-indent
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
    (add-hook 'css-mode-hook #'aggressive-indent-mode)
    )
#+END_SRC
** Find-file
Cari fail guna =C-x C-f= dan buat folder sekiranya belum tersedia seperti guna =mkdir
-p= di terminal

#+BEGIN_SRC emacs-lisp
  (defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
    "Create parent directory if not exists while visiting file."
    (unless (file-exists-p filename)
      (let ((dir (file-name-directory filename)))
        (unless (file-exists-p dir)
          (make-directory dir)))))
#+END_SRC

** Zoom in/out
*** Zoom
Untuk zoom in/out pakai kekunci =C-+/-= . Diambil dari [[https://github.com/purcell/default-text-scale][GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package default-text-scale
    :ensure t
    :bind (("C-x C--" . default-text-scale-decrease)
           ("C-x C-+" . default-text-scale-increase))
    :config
    (default-text-scale-mode))
#+END_SRC
*** Mouse
Pakai mouse =C-Scroll=

#+BEGIN_SRC emacs-lisp
  (global-set-key [C-mouse-4] 'text-scale-increase)
  (global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC

** Warning redefinition
Bila buat pertukaran di aturcara, kekadang ada amaran seperti ini
#+BEGIN_EXAMPLE
ad-handle-definition: 'bookmark-jump' got redefined
#+END_EXAMPLE

Ini adalah noise sahaja, untuk matikan amaran ini boleh baca dari [[https://andrewjamesjohnson.com/suppressing-ad-handle-definition-warnings-in-emacs/][blog]]

#+BEGIN_SRC emacs-lisp
  (setq ad-redefinition-action 'accept)
#+END_SRC
** Suspend-frame
Bila pakai =C-x C-z= akan menjadikan frame freeze. Kurang pasti bila fungsi ini
diperlukan. Oleh sebab itu ia dimatikan:

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-x C-z"))
#+END_SRC

Sekiranya frame freeze boleh pakai terminal dan larikan komando ini:

#+BEGIN_example
  xkill -frame $emacs
#+END_example

** Copy file path
Cara untuk menyalin file path di buffer yang sedang digunakan.

#+BEGIN_SRC emacs-lisp
  (defun xah-copy-file-path (&optional @dir-path-only-p)
    "Copy the current buffer's file path or dired path to `kill-ring'.
  Result is full path.
  If `universal-argument' is called first, copy only the dir path.

  If in dired, copy the file/dir cursor is on, or marked files.

  If a buffer is not file and not dired, copy value of `default-directory' (which is usually the âcurrentâ dir when that buffer was created)

  URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'
  Version 2017-09-01"
    (interactive "P")
    (let (($fpath
           (if (string-equal major-mode 'dired-mode)
               (progn
                 (let (($result (mapconcat 'identity (dired-get-marked-files) "\n")))
                   (if (equal (length $result) 0)
                       (progn default-directory )
                     (progn $result))))
             (if (buffer-file-name)
                 (buffer-file-name)
               (expand-file-name default-directory)))))
      (kill-new
       (if @dir-path-only-p
           (progn
             (message "Directory path copied: ã%sã" (file-name-directory $fpath))
             (file-name-directory $fpath))
         (progn
           (message "File path copied: ã%sã" $fpath)
           $fpath )))))

  (global-set-key (kbd "C-c d") 'xah-copy-file-path)
#+END_SRC

* Which key
Tunjukkan kombinasi kekunci. Untuk aturcara sila rujuk [[https://github.com/justbur/emacs-which-key][GitHub]]. Bila kekunci
ditunjukkan dipelbagai mukasurat, guna =C-h= untuk pilih mukasurat seterusnya atau sebelumnya.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer 2
    :config
    ;;aktifkan
    (which-key-mode)

    ;;Utk key yang panjang
    ;; (setq which-key-use-C-h-commands nil)

    ;;Jenis pop-up
    (setq which-key-popup-type 'side-window)
    (setq which-key-side-window-max-height 0.15) ;berapa peratus dari window semasa

    ;;Bezakan kekunci local dan global
    (set-face-attribute 'which-key-command-description-face nil :inherit nil) ;buang warna
    (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold) ;local bold

    :diminish which-key-mode)
#+END_SRC

* Winner mode

Gunakan =C-c <left>= and =C-c <right>= untuk kembali ke buffer sebelumnya

#+BEGIN_SRC emacs-lisp
  (winner-mode t)
#+END_SRC

* Kill-ring
Dari [[https://github.com/browse-kill-ring/browse-kill-ring][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :defer 2
    :bind ("M-y" . browse-kill-ring)
    :config
    (setq browse-kill-ring-highlight-current-entry t))
#+END_SRC

* Estetik
** Menu bar
Buang menu bar dan sekiranya perlu tekan =F10-m= atau =M-x
toggle-menu-bar-mode-from-frame= atau =menu-bar-open=. Capaian ke menu bar. Biasanya hany pakai ~f6~
tetapi ~f6~ dipakai untuk =ybk/map=
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1) ;sembunyikan tool-bar
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Modeline
*** Powerline aturcara sendiri

Sekiranya =moe-theme= dipakai maka matikan source-code di bawah.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package powerline
    :ensure t
    :init (setq powerline-default-separator 'slant) ;contour, butt, wave, arrow, arrow-fade etc
    :config
    (add-hook 'desktop-after-read-hook 'powerline-reset)

    ;; yus-theme
    (defface yus-aktif1 '((t (:background "#900" :inherit mode-line))) ;#a2e #2a5289 #4c52ee #179 #cfdfff #00d9ff #19a
      "Powerline muka 1."
      :group 'powerline)
    (defface yus-aktif2 '((t (:background "#35f" :inherit mode-line))) ;#2c5197 #a25ec3 #a19 #8b008b #369 #3a11ff #28a #a669ef #4c56aa
      "Powerline muka 2."
      :group 'powerline)
    (defface yus-tidak-aktif1 '((t (:background "#012" :inherit mode-line-inactive))) ;#1a5aee #35f #a25fff #586e75
      "Powerline muka 1."
      :group 'powerline)
    (defface yus-tidak-aktif2 '((t (:background "gray30" :inherit mode-line-inactive))) ;#273f87 #5478e4 #93a1a1 #900
      "Powerline muka 2."
      :group 'powerline)
    (defface yus-hujung '((t (:background "grey25" :inherit mode-line)))
      "Powerline muka 1."
      :group 'powerline)
    (defface yus-buffer-id-tidak-aktif
      '((t (:background "grey20" :inherit mode-line-buffer-id)))
      "Powerline mode-line face"
      :group 'powerline)
    (defun ml-yus-theme ()
      "Setup utk ml-yus-theme."
      (interactive)
      (setq-default mode-line-format
                    '("%e"
                      (:eval
                       (let* ((file-name (buffer-file-name (current-buffer)))
                              (active (powerline-selected-window-active))
                              (mode-line-buffer-id (if active 'mode-line-buffer-id 'yus-buffer-id-tidak-aktif))
                              (mode-line (if active 'mode-line 'mode-line-inactive))
                              (wajah1 (if active 'yus-aktif1 'yus-tidak-aktif1))
                              (wajah2 (if active 'yus-aktif2 'yus-tidak-aktif2))
                              (separator-left (intern (format "powerline-%s-%s"
                                                              (powerline-current-separator)
                                                              (car powerline-default-separator-dir))))
                              (separator-right (intern (format "powerline-%s-%s"
                                                               (powerline-current-separator)
                                                               (cdr powerline-default-separator-dir))))

                              (lhs (list (powerline-raw "%  " mode-line 'l)
                                         ;; (when powerline-display-buffer-size
                                         ;;   (powerline-buffer-size mode-line 'l))
                                         ;; (when powerline-display-mule-info
                                         ;;   (powerline-raw mode-line-mule-info mode-line 'l))
                                         ;; (powerline-buffer-id mode-line-buffer-id 'l)
                                         ;; (when (and (boundp 'which-func-mode) which-func-mode)
                                         ;;   (powerline-raw which-func-format nil 'l))

                                         (powerline-raw "[" mode-line)
                                         (powerline-raw (projectile-project-name) mode-line)
                                         ;; (powerline-raw "] %b %* [%f]" mode-line) ;%f for Ã¥ vise file path
                                         (powerline-raw "] %f %*" mode-line) ;%f for Ã¥ vise file path
                                         (powerline-raw (concat " "
                                                                (when (and file-name vc-mode)
                                                                  (concat "(" (-> file-name
                                                                                  vc-working-revision
                                                                                  (string-utils-truncate-to 40))
                                                                          ")")))
                                                        mode-line 'r)

                                         (powerline-raw " ")
                                         ;; pembahagian kiri
                                         (funcall separator-left mode-line wajah1)
                                         (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
                                           (powerline-raw erc-modified-channels-object wajah1 'l))
                                         (powerline-major-mode wajah1 'l)
                                         (powerline-process wajah1)
                                         (powerline-minor-modes wajah1 'l)
                                         ;;(powerline-narrow wajah1 'l)
                                         (powerline-raw " " wajah1)
                                         ;;pembahagian kiri
                                         (funcall separator-left wajah1 wajah2)
                                         (powerline-vc wajah2 'r)
                                         (when (bound-and-true-p nyan-mode)
                                           (powerline-raw (list (nyan-create)) wajah2 'l))))
                              (rhs (list (powerline-raw global-mode-string wajah2 'r)
                                         ;; pembahagian kanan
                                         (funcall separator-right wajah2 wajah1)
                                         (unless window-system
                                           (powerline-raw (char-to-string #xe0a1) wajah1 'l))
                                         (powerline-raw "%4l" wajah1 'l)
                                         (powerline-raw ":" wajah1 'l)
                                         (powerline-raw "%3c" wajah1 'r)
                                         ;; pembahagian kanan
                                         (funcall separator-right wajah1 'yus-hujung) ;mode-line
                                         (powerline-raw " " 'yus-hujung)
                                         (powerline-raw "%6p" 'yus-hujung 'r) ;mode-line
                                         (when powerline-display-hud
                                           (powerline-hud wajah2 wajah1)))))
                         (concat (powerline-render lhs)
                                 (powerline-fill wajah2 (powerline-width rhs))
                                 (powerline-render rhs)))

                       ))))

    (ml-yus-theme)
    )
#+END_SRC
*** Tukar powerline-separator
Untuk tukar separator terutama bila tukar tema. Diambil di [[https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-global-functions.el][sini]]. Antara separator
yang boleh dipakai ialah contour, butt, wave, arrow, arrow-fade etc

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun cycle-powerline-separators (&optional reverse)
    "Set Powerline separators in turn.  If REVERSE is not nil, go backwards."
    (interactive)
    (let* ((fn (if reverse 'reverse 'identity))
           (separators (funcall fn '("arrow" "arrow-fade" "slant"
                                     "chamfer" "wave" "brace" "roundstub" "zigzag"
                                     "butt" "rounded" "contour" "curve")))
           (found nil))
      (while (not found)
        (progn (setq separators (append (cdr separators) (list (car separators))))
               (when (string= (car separators) powerline-default-separator)
                 (progn (setq powerline-default-separator (cadr separators))
                        (setq found t)
                        (redraw-display)))))))
#+END_SRC

** Theme
Tema yang dipakai.
*** Sanityinc-tomorrow.
=color-theme-sanityinc-tomorrow= Tidak ada masalah tukar tema di =Org-mode=:
 - blue
 - bright
 - eighties
 - night
 - day

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package color-theme-sanityinc-tomorrow
     :ensure t
     :config
     ;; utk tukar tema f10-t
     (setq my-themes '(
                       sanityinc-tomorrow-night
                       sanityinc-tomorrow-eighties
                       sanityinc-tomorrow-blue
                       sanityinc-tomorrow-bright
                       ;; sanityinc-tomorrow-day
                       ))


     (setq my-cur-theme nil)
     (defun cycle-my-theme ()
       "Cycle through a list of themes, my-themes"
       (interactive)
       (when my-cur-theme
         (disable-theme my-cur-theme)
         (setq my-themes (append my-themes (list my-cur-theme))))
       (setq my-cur-theme (pop my-themes))
       (load-theme my-cur-theme :no-confirm)
       (message "Tema dipakai: %s" my-cur-theme))

     ;; Switch to the first theme in the list above
     (cycle-my-theme)

     ;; Bind this to C-9
     (global-set-key (kbd "C-9") 'cycle-my-theme)
     ;; (bind-key "t" #'cycle-my-theme 'ybk/map)

     ;; Tukar warna utk comments
     (set-face-foreground 'font-lock-string-face "#008899")
     (set-face-foreground 'font-lock-comment-face "dark green")
     )
 #+END_SRC

*** Doom-theme

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package doom-themes
    :ensure t
    :config
    ;; utk tukar tema f10-t
    (setq my-themes '(
                      doom-one
                      doom-one-light
                      doom-tomorrow-night
                      doom-tomorrow-day
                      ))


    (setq my-cur-theme nil)
    (defun cycle-my-theme ()
      "Cycle through a list of themes, my-themes"
      (interactive)
      (when my-cur-theme
        (disable-theme my-cur-theme)
        (setq my-themes (append my-themes (list my-cur-theme))))
      (setq my-cur-theme (pop my-themes))
      (load-theme my-cur-theme :no-confirm)
      (message "Tema dipakai: %s" my-cur-theme))

    ;; Switch to the first theme in the list above
    (cycle-my-theme)

    ;; Bind this to C-9
    (global-set-key (kbd "C-9") 'cycle-my-theme)

    ;; (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)

    ;; or for treemacs users
    ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    ;; (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config) 

    )
#+END_SRC

* Eshell
Mulakan =eshell= dengan singkatan =C-x t=
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :commands (eshell eshell-command)
  :config
  (setq eshell-cmpl-cycle-completions nil
        ;; auto truncate after 20k lines
        eshell-buffer-maximum-lines 20000
        ;; history size
        eshell-history-size 350
        ;; no duplicates in history
        eshell-hist-ignoredups t
        ;; my prompt is easy enough to see
        eshell-highlight-prompt nil
        ;; when I cd somewhere, about 90% of the time I follow with ls, so just go ahead and always do that:
        eshell-list-files-after-cd t
        ;; also list all files w/ more info & human-readable filesizes:
        ;; eshell-ls-initial-args "-lah"

        ;; ;; treat 'echo' like shell echo
        eshell-plain-echo-behavior t)

  (setq eshell-scroll-to-bottom-on-input 'this)

  ;; ;; See: https://github.com/kaihaosw/eshell-prompt-extras
  ;; (use-package eshell-prompt-extras
  ;;   :init
  ;;   (progn
  ;;     (setq eshell-highlight-prompt nil
  ;;           epe-git-dirty-char " Ï"
  ;;           ;; epe-git-dirty-char "*"
  ;;           eshell-prompt-function 'epe-theme-lamda)))

  ;; (load "h:/minelpa/eshell-customize.el" )
  )
#+END_SRC
** Fancy prompt
*** Eshell-git-prompt
Boleh di lihat di [[https://github.com/xuchunyang/eshell-git-prompt][sini]]. Dimatikan sebab menyebabkan eshell lambat.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package eshell-git-prompt
    :ensure t
    :config
    (eshell-git-prompt-use-theme 'powerline))
#+END_SRC

** Shell pop
Boleh guna key-chort =-t= untuk pakai selain dari =C-x t=

#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    ;; == sekiranya pakai di :config akan pakai 'shell' dan bukan 'eshell'
    :init
    (setq shell-pop-window-position 'bottom
          shell-pop-window-height 30
          shell-pop-full-span t
          shell-pop-shell-type '("eshell" "*eshell*" (lambda nil (eshell))))


    ;; ;;== alternatif mÃ¥te Ã¥ gjÃ¸re det hvis vil bruke shell
    ;; (setq shell-pop-window-position 'bottom
    ;;       shell-pop-window-height 30
    ;;       shell-pop-full-span t
    ;;       shell-pop-shell-type '("shell" "*shell*" (lambda nil (shell shell-pop-term-shell))))
    )

  ;; key-chord guna key-seq
  (key-seq-define-global "jt" 'shell-pop)

  ;; ;; bagi indent di shell
  ;; (defun ybk-setup-sh-mode ()
  ;;   (interactive)
  ;;   (setq sh-basic-offset 2
  ;;         sh-indentation 2))

  ;; (add-hook 'sh-mode-hook 'ybk-setup-sh-mode)

  ;; Fix dumb terminal
  (setenv "PAGER" "cat")

  ;; Make URLs clickable
  (add-hook 'shell-mode-hook #'goto-address-mode)
  (add-hook 'eshell-mode-hook #'goto-address-mode)

  ;; Bruk standard shell hvis Ã¸nskelig
  (global-set-key (kbd "C-x t") 'shell)
#+END_SRC

* Undo
=C-z= as undo, not minimize emacs
#+BEGIN_SRC emacs-lisp
  (bind-key "C-z" #'undo)
#+END_SRC

Undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind (("C-x u" . undo-tree-visualize)
	   ("C-S-z" . redo))
    :config

    ;; make ctrl-Z redo
    (defalias 'redo 'undo-tree-redo)
    ;;(global-set-key (kbd "C-S-z") 'redo)

    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)

    ;; (defun ybk/undo-tree-enable-save-history ()
    ;;   "Enable auto saving of the undo history."
    ;;   (interactive)

    ;;   (setq undo-tree-auto-save-history t)

    ;;   ;; Compress the history files as .gz files
    ;;   ;; (advice-add 'undo-tree-make-history-save-file-name :filter-return
    ;;   ;;             (lambda (return-val) (concat return-val ".gz")))

    ;;   ;; Persistent undo-tree history across emacs sessions
    ;;   (setq ybk/undo-tree-history-dir (let ((dir (concat ybk/emacs-cache
    ;;                                                      "undo-tree-history/")))
    ;;                                     (make-directory dir :parents)
    ;;                                     dir))
    ;;   (setq undo-tree-history-directory-alist `(("." . ,ybk/undo-tree-history-dir)))

    ;;   (add-hook 'write-file-functions #'undo-tree-save-history-hook)
    ;;   (add-hook 'find-file-hook #'undo-tree-load-history-hook))

    ;; (defun ybk/undo-tree-disable-save-history ()
    ;;   "Disable auto saving of the undo history."
    ;;   (interactive)

    ;;   (setq undo-tree-auto-save-history nil)

    ;;   (remove-hook 'write-file-functions #'undo-tree-save-history-hook)
    ;;   (remove-hook 'find-file-hook #'undo-tree-load-history-hook))

    ;; Aktifkan
    (global-undo-tree-mode 1)

    :diminish (undo-tree-mode . " "))
#+END_SRC

* Rainbow mode

=rainbow-mode= displays hexadecimal colors with the color they
represent as their background.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-mode)
    (add-hook 'inferior-ess-mode-hook #'rainbow-mode)
    (add-hook 'ess-mode-hook #'rainbow-mode)
    (add-hook 'markdown-mode-hook #'rainbow-mode)
    (add-hook 'LaTeX-mode-hook #'rainbow-mode)
    (add-hook 'text-mode-hook #'rainbow-mode)

    :diminish (rainbow-mode . ""))
#+END_SRC

* Ivy
A generic completion mechanism for Emacs. Rujukan utk kekuci dan penerangan di [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][sini]]

Fungsi berguna bila di minibuffer =M-o=

| Kekunci | Fungsi                           |
|---------+----------------------------------|
| C-v     | Page up by one Ivy buffer size   |
| M-v     | Page down by one Ivy buffer size |
| M-<     | Beginning of buffer              |
| M->     | End of buffer                    |
| M-o     | Actions when in Ivy minibuffer   |

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :bind (
           ;; ("C-x b" . ivy-switch-buffer) :bruke 'jl' key-chord istedenfor
           ("C-x d" . ivy-dired-recent-dirs)
           ("C-s c" . ivy-resume) ;sambung cari bila pakai C-s "swiper" i.e Continue
           )
    :config
    (ivy-mode 1)
    (setq ivy-display-style 'fancy)
    (setq ivy-use-virtual-buffers t) ;add recent files and bookmarks at ivy-switch-buffer
    (setq ivy-height 12) ;displays the current and total number in the collection in the prompt
    (setq ivy-count-format "%d/%d ") ;show number of matched candidate in current and total

    ;; Do not show "./" and "../" in the `counsel-find-file' completion list
    (setq ivy-extra-directories nil) ; default value: ("../" "./")

    ;; open recent directory, requires ivy (part of swiper)
    ;; borrows from http://stackoverflow.com/questions/23328037/in-emacs-how-to-maintain-a-list-of-recent-directories
    (defun ivy-dired-recent-dirs ()
      "Present a list of recently used directories and open the selected one in dired"
      (interactive)
      (let ((recent-dirs
             (delete-dups
              (mapcar (lambda (file)
                        (if (file-directory-p file) file (file-name-directory file)))
                      recentf-list))))

        (let ((dir (ivy-read "Directory: "
                             recent-dirs
                             :re-builder #'ivy--regex
                             :sort nil
                             :initial-input nil)))
          (dired dir))))

    ;; Ivy select multiple files
    ;; Tapi tidak berfungsi - Pakai Ibuffer dan mark utk fungsi yg sama
    ;; https://github.com/abo-abo/swiper/issues/561
    (defvar ivy-marked-candidates nil
      "List of marked candidates")

    (defun ivy-mark-candidate ()
      (interactive)
      (let ((cand ivy--current))
        (if (member cand ivy-marked-candidates)
            (progn
              (setq ivy-marked-candidates
                    (delete cand ivy-marked-candidates))
              (setcar (member ivy--current (ivy-state-collection ivy-last))
                      (setf (nth ivy--index ivy--old-cands) (substring cand 2))))
          (setcar (member ivy--current (ivy-state-collection ivy-last))
                  (setq cand (setf (nth ivy--index ivy--old-cands) (concat "M|" cand))))
          (setq ivy-marked-candidates
                (append ivy-marked-candidates (list cand))))))

    (define-key ivy-minibuffer-map (kbd "C-<SPC>") 'ivy-mark-candidate)

    (defun testf ()
      (interactive)
      (setq ivy-marked-candidates '())
      (ivy-read "select: " (mapcar #'substring-no-properties
                                   '("a" "b" "c" "d" "e"))
                :caller 'testf
                :action
                (lambda (x)
                  (with-ivy-window
                    (insert (mapconcat (lambda (s)
                                         (if (string-match "^M|" s)
                                             (substring s 2)
                                           s))
                                       (or ivy-marked-candidates
                                           (list x))
                                       ", "))))))
    ;; insert files name
    (ivy-add-actions t
                     '(("f" (lambda (x) (with-ivy-window (insert (file-relative-name x)))) "file name")))

    ;; Key-chord
    (key-chord-define-global "jl" #'ivy-switch-buffer)
    )
#+END_SRC

** Ivy-hydra
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :ensure t
    :after ivy)
#+END_SRC
** Insert file path
Diambil dari [[https://www.emacswiki.org/emacs/InsertFileName][Wiki]]. Cari fail yang ingin dimasukkan dengan =C-x C-f= kemudian bila di minibuffer boleh pakai
=M-o I=, =M-o F= atau =M-o B= untuk masukkan ~file path~ dari minibuffer

#+BEGIN_SRC emacs-lisp :tangle no
  (ivy-add-actions t
                   '(("I" (lambda (x) (with-ivy-window (insert x))) "insert")))
  (ivy-add-actions 'counsel-find-file
                   '(("F" (lambda (x) (with-ivy-window (insert (file-relative-name x))))
                      "insert relative file name")
                     ("B" (lambda (x)
                            (with-ivy-window
                              (insert (file-name-nondirectory (replace-regexp-in-string "/\\'" "" x)))))
                      "insert file name without any directory information")))
#+END_SRC

* Swiper
Untuk memudahkan pencarian di buffer. Untuk fungsi =cari & tukar= (search & replace)
mula dengan cari =C-s= dan kemudian =M-q= utk perkataan yang ingin ditukarkan. Kemudian
=SPC= atau "Y" utk laksanakan pertukaran

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("C-s s" . swiper)
           ;; ("C-r" . swiper) ;C-r pakai utk ivy-resume
           ("C-c m" . woman) ;manual
           ("C-c u" . swiper-all))
    :diminish ivy-mode)
#+END_SRC

* Counsel
A collection of Ivy-enhanced versions of common Emacs commands. Pakai =M-o= utk buka
actions bila di Ivy minibuffer. Atau =C-o= utk Counsel commands

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-x C-r" . counsel-recentf)
     ("<f1> k" . counsel-descbinds)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f2> m" . counsel-imenu)
     ("C-M-y" . counsel-yank-pop)
     ("C-x l" . counsel-locate))
    :config
    ;;key-chord utk find-file
    (key-seq-define-global "jf" 'counsel-find-file)

    ;; tambah action bila pakai =M-o=
    (ivy-set-actions
     'counsel-find-file
     '(("d" delete-file "delete")))

    ;; cari di direktori current file
    (setq counsel-find-file-at-point t)
    ;; ignore . files or temporary files
    (setq counsel-find-file-ignore-regexp
          (concat
           ;; File names beginning with # or .
           "\\(?:\\`[#.]\\)"
           ;; File names ending with # or ~
           "\\|\\(?:\\`.+?[#~]\\'\\)")))
#+END_SRC

* Company

Utk melengkapkan pencarian perkataan dsb. Tekan =TAB= utk percepatkan carian tanpa
tunggu 1 saat. Untuk masalah di =eshall= bila pakai estrisk (*) boleh pakai quote =C-q=

** Aturcara umum

| Kekunci | Fungsi                |
|---------+-----------------------|
| C-.     | Company-files         |
| C-c TAB | Company-dabbrev       |
| M-1     | Comp. quickhelp HIDE  |
| M-2     | Comp. quickhelp mode  |
|---------+-----------------------|
| Kekunci di lokal mode shj       |
|---------+-----------------------|
| C-n     | Comp. select next     |
| C-p     | Comp. select previous |
| C-d     | Comp. show doc buffer |

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind (:map ybk/prog-map
                ("m" . company-begin-backend)
                :map company-active-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous)
                ("C-d" . company-show-doc-buffer)
                ("<tab>" . company-complete))
    :init
    ;; (add-hook 'after-init-hook 'global-company-mode) ;aktifkan disemua buffer
    :config
    (global-company-mode t) ;aktifkan disemua buffer

    ;; Use Company for completion
    (bind-key [remap completion-at-point] #'company-complete company-mode-map)

    (setq company-tooltip-align-annotations t   ; align
          company-tooltip-limit 3               ; list to show
          company-tooltip-flip-when-above t
          company-show-numbers t                ; Easy navigation to candidates with M-<n>
          company-idle-delay .2                 ; delay before autocomplete popup
          company-minimum-prefix-length 4       ; 4 prefix sebelum tunjukkan cadangan (default)
          company-abort-manual-when-too-short t ; tanpa company sekiranya prefix pendek dari 'minimum-prefix-length'
          )


    (setq company-dabbrev-downcase nil          ;keep returned candidate as-is. default 'case-replace
          company-debbrev-ignore-case t)        ;ignore case

    ;; ;; Enable globally
    ;; (global-company-mode 1)
    ;; ;;Different settings
    ;; (setq company-idle-delay .1) ;bila 1 akan tangguh 1 saat
    ;; (setq company-show-numbers t)
    ;; (setq company-minimum-prefix-length 3) ;Berapa prefix sebelum tunjukkan cadangan
    ;; (setq company-dabbrev-downcase nil)
    ;; (setq company-dabbrev-other-buffers t)
    ;; (setq company-auto-complete nil)
    ;; (setq company-tooltip-align-annotations t)
    ;; (setq company-tooltip-limit 5)
    ;; (setq company-dabbrev-code-other-buffers 'all)
    ;; (setq company-dabbrev-code-everywhere t)
    ;; (setq company-dabbrev-code-ignore-case t)
    ;; ;; (global-set-key (kbd "C-<tab>") 'company-dabbrev)
    ;; ;; (global-set-key (kbd "M-<tab>") 'company-complete)

    ;; ;; Aktivkan di mode tertentu contohny:
    ;; (add-to-list 'company-backends '(company-capf :with company-abbrev)) ;merge different backends
    ;; ;; utk pakai aktifkan dgn F12-y
    ;; (add-to-list 'company-backends 'company-yasnippet) ;yasnippet - matikan sebab confict dgn company org-mode

    ;; ;; aktivkan company
    ;; (add-hook 'shell-mode-hook (lambda () (setq-local company-backends 'company-files)))

    ;; aktifkan di org-mode selepas pastikan company-capf di company-backends
    ;; https://github.com/company-mode/company-mode/issues/50
    (defun add-pcomplete-to-capf ()
      (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))

    (add-hook 'org-mode-hook #'add-pcomplete-to-capf)

    ;; Company appears to override the above keymap based on company-auto-complete-chars.
    ;; Turning it off ensures we have full control.
    (setq company-auto-complete-chars nil)

    ;; ;; Matikan di mode tertentu
    ;; (setq company-global-modes '(not org-mode)) ;org-mode

    ;; (bind-keys :map company-active-map
    ;;            ("C-n" . company-select-next)
    ;;            ("C-p" . company-select-previous)
    ;;            ("C-d" . company-show-doc-buffer)
    ;;            ("<tab>" . company-complete))
    :diminish
    (company-mode . " "))

#+END_SRC
** Company go
#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'company-go))
    :config
    ;; ;;color customization
    ;; (custom-set-faces
    ;;  '(company-preview
    ;;    ((t (:foreground "darkgray" :underline t))))
    ;;  '(company-preview-common
    ;;    ((t (:inherit company-preview))))
    ;;  '(company-tooltip
    ;;    ((t (:background "lightgray" :foreground "black"))))
    ;;  '(company-tooltip-selection
    ;;    ((t (:background "steelblue" :foreground "white"))))
    ;;  '(company-tooltip-common
    ;;    ((((type x)) (:inherit company-tooltip :weight bold))
    ;;     (t (:inherit company-tooltip))))
    ;;  '(company-tooltip-common-selection
    ;;    ((((type x)) (:inherit company-tooltip-selection :weight bold))
    ;;     (t (:inherit company-tooltip-selection)))))
    )

#+END_SRC

** Company quick-helps
Tambahan informasi bagi funksi contohnya di R atau program lain. Tapi bila
aktivkan sepenuhnya selalu mengganggu. Jadi aktivkan bila perlu sahaja

#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :after company
    :config
    (company-quickhelp-mode -1) ;Matikan

    ;; Manually trigger the help popup
    (eval-after-load 'company
      '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))

    ;; :bind (("M-1" . company-quickhelp-hide)
    ;;        ("M-2" . company-quickhelp-mode))
    )
#+END_SRC

** Company-flx
Tambah fuzzy matching ke Company

#+BEGIN_SRC emacs-lisp
  (use-package company-flx
    :ensure t
    :config
    (company-flx-mode +1))
#+END_SRC
*** Completing
Sumber dari [[https://github.com/company-mode/company-statistics][sini]]. Buat log completion yang dipakai dan akan disusun mengikut
kekerapan.

#+BEGIN_SRC emacs-lisp
  (use-package company-statistics
    :ensure t
    :after company
    :hook (after-init . company-statistics-mode))
#+END_SRC

* Explorer
Explore file with =neotree= or =treemacs=
** Neotree
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package neotree
     :ensure t
     :defer 1
     :bind ([f4] . neotree-toggle)
     :init
     (progn
       (setq-default neo-smart-open t) ;  every time when the neotree window is
                                           ;  opened, it will try to find current
                                           ;  file and jump to node.
       (setq-default neo-dont-be-alone t) ; Don't allow neotree to be the only open
                                           ; window
       )
     :config
     (progn
       (setq neo-theme 'nerd) ; 'classic, 'nerd, 'ascii, 'arrow

       (setq neo-vc-integration '(face char))

       ;; Patch to fix vc integration
       (defun neo-vc-for-node (node)
         (let* ((backend (vc-backend node))
                (vc-state (when backend (vc-state node backend))))
           ;; (message "%s %s %s" node backend vc-state)
           (cons (cdr (assoc vc-state neo-vc-state-char-alist))
                 (cl-case vc-state
                   (up-to-date       neo-vc-up-to-date-face)
                   (edited           neo-vc-edited-face)
                   (needs-update     neo-vc-needs-update-face)
                   (needs-merge      neo-vc-needs-merge-face)
                   (unlocked-changes neo-vc-unlocked-changes-face)
                   (added            neo-vc-added-face)
                   (removed          neo-vc-removed-face)
                   (conflict         neo-vc-conflict-face)
                   (missing          neo-vc-missing-face)
                   (ignored          neo-vc-ignored-face)
                   (unregistered     neo-vc-unregistered-face)
                   (user             neo-vc-user-face)
                   (t                neo-vc-default-face)))))

       (defun ybk/neotree-go-up-dir ()
         (interactive)
         (goto-char (point-min))
         (forward-line 2)
         (neotree-change-root))

       ;; http://emacs.stackexchange.com/a/12156/115
       (defun ybk/find-file-next-in-dir (&optional prev)
         "Open the next file in the directory.
       When PREV is non-nil, open the previous file in the directory."
         (interactive "P")
         (let ((neo-init-state (neo-global--window-exists-p)))
           (if (null neo-init-state)
               (neotree-show))
           (neo-global--select-window)
           (if (if prev
                   (neotree-previous-line)
                 (neotree-next-line))
               (progn
                 (neo-buffer--execute nil
                                      (quote neo-open-file)
                                      (lambda (full-path &optional arg)
                                        (message "Reached dir: %s/" full-path)
                                        (if prev
                                            (neotree-next-line)
                                          (neotree-previous-line)))))
             (progn
               (if prev
                   (message "You are already on the first file in the directory.")
                 (message "You are already on the last file in the directory."))))
           (if (null neo-init-state)
               (neotree-hide))))

       (defun ybk/find-file-prev-in-dir ()
         "Open the next file in the directory."
         (interactive)
         (ybk/find-file-next-in-dir :prev))

       (bind-keys
        :map neotree-mode-map
        ("^"          . ybk/neotree-go-up-dir)
        ("C-c +"      . ybk/find-file-next-in-dir)
        ("C-c -"      . ybk/find-file-prev-in-dir)
        ("<C-return>" . neotree-change-root)
        ("C"          . neotree-change-root)
        ("c"          . neotree-create-node)
        ("+"          . neotree-create-node)
        ("d"          . neotree-delete-node)
        ("r"          . neotree-rename-node)
        ("h"          . neotree-hidden-file-toggle)
        ("f"          . neotree-refresh))))
 #+END_SRC
** Treemacs

#+BEGIN_SRC emacs-lisp :tangle no
  ;; treemacs: a tree layout file explorer for Emacs
  ;; https://github.com/Alexander-Miller/treemacs
  (use-package treemacs
    :ensure t
    :bind
    (:map global-map
          ([f4] . treemacs)
          ("C-c f" . treemacs-select-window)))

  (use-package treemacs-projectile
    :ensure t
    :after treemacs projectile
    :bind (:map global-map
                ("C-c o p" . treemacs-projectile)))

  (use-package treemacs-magit
    :ensure t
    :after treemacs magit)

  ;; needed for neotree or treemacs

  (use-package all-the-icons
    :if window-system
    :ensure t
    ;; :config
    ;; (when (not (member "all-the-icons" (font-family-list)))
    ;;   (all-the-icons-install-fonts t))
    )


  ;; adds treemacs icons to dired buffers
  ;; https://github.com/Alexander-Miller/treemacs/blob/master/src/extra/treemacs-icons-dired.el
  (use-package treemacs-icons-dired
    :ensure t
    :after treemacs dired
    :config (treemacs-icons-dired-mode))

#+END_SRC

Cara 2

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Treemacs
  (use-package treemacs
    :ensure t
    :bind ([f4] . treemacs)
    :config
    (treemacs-follow-mode t)
    (setq treemacs-width 35
          treemacs-display-in-side-window t
          treemacs-indentation-string (propertize " " 'face 'font-lock-comment-face)
          treemacs-indentation 1)
    (add-hook 'treemacs-mode-hook #'hide-mode-line-mode)
    (add-hook 'treemacs-mode-hook (lambda ()
                                    (linum-mode -1)
                                    (fringe-mode 0)
                                    (setq buffer-face-mode-face `(:background "#211C1C"))
                                    (buffer-face-mode 1)))
    ;; Improve treemacs icons
    (with-eval-after-load 'treemacs
      (with-eval-after-load 'all-the-icons
        (let ((all-the-icons-default-adjust 0)
              (tab-width 1))
          ;; Root icon
          (setq treemacs-icon-root-png
                (concat (all-the-icons-octicon "repo" :height 0.8 :v-adjust -0.2)  " "))
          ;; File icons
          (setq treemacs-icon-open-png
                (concat
                 (all-the-icons-octicon "chevron-down" :height 0.8 :v-adjust 0.1)
                 "\t"
                 (all-the-icons-octicon "file-directory" :v-adjust 0)
                 "\t")
                treemacs-icon-closed-png
                (concat
                 (all-the-icons-octicon "chevron-right" :height 0.8
                                        :v-adjust 0.1 :face 'font-lock-doc-face)
                 "\t"
                 (all-the-icons-octicon "file-directory" :v-adjust 0 :face 'font-lock-doc-face)
                 "\t"))
          ;; File type icons
          (setq treemacs-icons-hash (make-hash-table :size 200 :test #'equal)
                treemacs-icon-fallback (concat
                                        "\t\t"
                                        (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver
                                                              :height 0.8 :v-adjust 0.0)
                                        "\t")
                treemacs-icon-text treemacs-icon-fallback)

          (dolist (item all-the-icons-icon-alist)
            (let* ((extension (car item))
                   (func (cadr item))
                   (args (append (list (caddr item)) '(:v-adjust -0.05) (cdddr item)))
                   (icon (apply func args))
                   (key (s-replace-all '(("^" . "") ("\\" . "") ("$" . "") ("." . "")) extension))
                   (value (concat "\t\t" icon "\t")))
              (unless (ht-get treemacs-icons-hash (s-replace-regexp "\\?" "" key))
                (ht-set! treemacs-icons-hash (s-replace-regexp "\\?" "" key) value))
              (unless (ht-get treemacs-icons-hash (s-replace-regexp ".\\?" "" key))
                (ht-set! treemacs-icons-hash (s-replace-regexp ".\\?" "" key) value))))))))

  (use-package treemacs-projectile
    :ensure t)
#+END_SRC

* Parentheses
** Smartparens
Pasangan utk parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :demand t
    :bind (:map ybk/prog-map
                ("a" . sp-beginning-of-sexp)
                ("e" . sp-end-of-sexp)
                ("u" . sp-unwrap-sexp) ;sama seperti sp-splice-sexp
                ("x" . sp-kill-sexp))
    ;; ("C-M-a" . sp-beginning-of-sexp)
    ;; ("C-M-e" . sp-end-of-sexp)
    ;; ("C-M-u" . sp-unwrap-sexp) ; sama seperti sp-splice-sexp
    :config
    (require 'smartparens-config)
    (setq sp-show-pair-from-inside t)

    ;;program mode
    ;; (add-hook 'org-src-mode-hook #'smartparens-strict-mode)
    ;; (add-hook 'inferior-ess-mode-hook #'smartparens-strict-mode)
    (add-hook 'org-src-mode-hook #'smartparens-mode)
    (add-hook 'inferior-ess-mode-hook #'smartparens-mode)
    (add-hook 'LaTeX-mode-hook #'smartparens-mode)
    (add-hook 'markdown-mode-hook #'smartparens-mode)

    ;;(smartparens-global-strict-mode)
    (show-smartparens-global-mode)
    (smartparens-global-mode)

    :diminish (smartparens-mode . ""))

#+END_SRC

** Rainbow-delimited
Warna untuk setiap pasangan parentheses
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :commands rainbow-delimiters-mode
    :init
    (add-hook 'org-src-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'inferior-ess-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'markdown-mode-hook  #'rainbow-delimiters-mode)
    (add-hook 'ess-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Navigation

** Switching windows

Tukarkan ke window atau buffers tertentu bila terdapat window/buffer terbahagi

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
#+END_SRC

Lompat dari window ke window dengan menggunakan =M= kemudian nombor window

#+BEGIN_SRC emacs-lisp
  (use-package winum
    :ensure t
    :defer 1
    :bind (:map ybk/move-map
                ("w" . winum-select-window-by-number))
    :init
    (setq winum-keymap
          (let ((map (make-sparse-keymap)))
            ;; (define-key map (kbd "<f2> w") 'winum-select-window-by-number)
            (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
            (define-key map (kbd "M-1") 'winum-select-window-1)
            (define-key map (kbd "M-2") 'winum-select-window-2)
            (define-key map (kbd "M-3") 'winum-select-window-3)
            (define-key map (kbd "M-4") 'winum-select-window-4)
            (define-key map (kbd "M-5") 'winum-select-window-5)
            (define-key map (kbd "M-6") 'winum-select-window-6)
            (define-key map (kbd "M-7") 'winum-select-window-7)
            (define-key map (kbd "M-8") 'winum-select-window-8)
            map))
    :config
    (winum-mode))
#+END_SRC

** Predictive abbreviation

Penerangan boleh baca di [[https://www.emacswiki.org/emacs/PredictiveAbbreviation][Wiki]]. Fungsi ini memakai perkataan2 yang telah dipakai di
buffer untuk mempercepatkan penulisan, hampir seperti =company=.

#+BEGIN_SRC emacs-lisp
  (use-package pabbrev
    :ensure t
    :diminish pabbrev-mode
    :hook ((org-mode
            ess-mode
            emacs-lisp-mode
            text-mode). pabbrev-mode)

    :init
    (setq pabbrev-idle-timer-verbose nil
          pabbrev-read-only-error nil
          pabbrev-scavenge-on-large-move nil)
    :bind ("C-i" . pabbrev-expand-maybe)
    :config
    (put 'yas-expand 'pabbrev-expand-after-command t)

    ;;aktifkan pabbrev
    (global-pabbrev-mode)

    ;; Fix for pabbrev not working in org mode
    ;; http://lists.gnu.org/archive/html/emacs-orgmode/2016-02/msg00311.html
    (define-key pabbrev-mode-map (kbd "C-i") 'pabbrev-expand-maybe)
    ;; (define-key pabbrev-mode-map [tab] 'pabbrev-expand-maybe)

    ;; kill all possible overlay from current view
    (setq pabbrev-debug-erase-all-overlays t)

    ;; ;; hook to text-mode-hook
    ;; (add-hook 'text-mode-hook (lambda () (pabbrev-mode)))

    ;; pretty print a hash
    (setq pabbrev-debug-print-hash t)

    ;;limit suggestions and sort
    (setq pabbrev-suggestions-limit-alpha-sort 5)
    )
#+END_SRC

Untuk memudahkan pergerakkan di dokument yang sedang dibuka.

| Kekunci | Fungsi            |
|---------+-------------------|
| C-f2    | bm-toggle         |
| M-home  | save point        |
| M-end   | restore point     |

** Mark
Cara asas untuk pergerakkan boleh guna fungsi [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark.html][mark document]]. Caranya:
- =C-SPC= set mark dan aktifkan di region
- =C-SPC C-SPC= set mark (aktifkan dan mematikan)
- =C-x C-x= berkaitan dengan ~exchange-point-and-mark~
- =C-u C-SPC= pindah ke mark sebelumnya (utk pergerakkan)
Selanjutnya boleh dibaca di [[http://ergoemacs.org/emacs/emacs_jump_to_previous_position.html][sini]].
** Goto Change
Fungsi [[https://www.emacswiki.org/emacs/GotoChg][Goto Chg]] dipakai untuk kembali ke tempat pertukaran sebelumnya.

#+BEGIN_SRC emacs-lisp
  (use-package goto-chg
    :ensure t
    :bind (("C-x C-<left>" . goto-last-change)
           ("C-x C-<right>" . goto-last-change-reverse)))
#+END_SRC

** Goto Last Change
Fungsi [[https://www.emacswiki.org/emacs/GotoLastChange][Goto Last Change]] hampir sama dengan *Goto Chg* diatas dipakai untuk kembali
tempat pertukaran sebelumnya.

#+BEGIN_SRC emacs-lisp
  (use-package goto-last-change
    :ensure t
    :bind ("C-x C-\\" . goto-last-change))
#+END_SRC

** Register
Untuk simpan sementara (transient storage) dan hilang bila matikan Emacs. Caranya:
- =C-x-r-Space= utk simpan/daftarkan tempat cursor utk kembali di register
- =C-x-r-j= utk ke tempat yang didaftarkan di register

Contoh =C-x r SPC b= daftarkan tempat cursor sebagai *b* dan utk kembali ke sini tekan
=C-x r j b=. Pendaftaran tempat hanya boleh pakai satu huruf sahaja.

#+BEGIN_SRC emacs-lisp
  (global-set-key [M-home] 'point-to-register)
  (global-set-key [M-end] 'jump-to-register)

  ;; bind-key dengan [f2] move key
  ;; (bind-key "SPC" #'point-to-register 'ybk/move-map)
  ;; (bind-key "<end>" #'jump-to-register 'ybk/move-map)
  (bind-key "p" #'point-to-register 'ybk/move-map)
  (bind-key "o" #'jump-to-register 'ybk/move-map)
#+END_SRC

** Bookmark
Berlu dipelajari. Sila baca [[https://www.emacswiki.org/emacs/BookMarks][Wiki:Bookmarks]] utk cara umum iaitu:
- âC-x r mâ â set a bookmark at the current location (e.g. in a file)
- âC-x r bâ â jump to a bookmark
- âC-x r lâ â list your bookmarks
- âM-x bookmark-deleteâ â delete a bookmark by name

[[https://github.com/emacsmirror/bookmark-plus][Bookmark-plus]] boleh download langsung di GitHub dan pasang di =load-path=

  Some keys for bookmark list:
  âsâ â save bookmark while in bookmark
  âaâ â show annotation for the current bookmark
  âAâ â show all annotations for your bookmarks
  âdâ â mark various entries for deletion (âxâ â to delete them)
  âeâ â edit the annotation for the current bookmark
  âmâ â mark various entries for display and other operations, (âvâ â to visit)
  âoâ â visit the current bookmark in another window, keeping the bookmark list open
  âC-oâ â switch to the current bookmark in another window
  ârâ â rename the current bookmark
  âxâ â to delete bookmark or with 'd' to mark various entries before deletion with x

  Sila rujuk ke =Ivy= untuk funksi /ivy-bookmark-goto/ kekunci =bm=. Cara
  diambil dari [[http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html][Blog Binchen]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bookmark
    :ensure t
    :init
    (setq bookmark-default-file (concat ybk/emacs-cache "bookmarks") ;bookmarks dir
          bookmark-save-flag 1) ;auto save when chnage else use "t" to autosave when emacs quits
    :bind (:map ybk/move-map
                ("r" . bookmark-set)
                ("j" . bookmark-jump)
                ("l" . bookmark-bmenu-list))
    :config
    ;; bookmark+ harus di download di GitHub dan pasang di load-path
    ;; http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html
    (defun ivy-bookmark-goto ()
      "Open ANY bookmark"
      (interactive)
      (let (bookmarks filename)
        ;; load bookmarks
        (unless (featurep 'bookmark)
          (require 'bookmark))
        (bookmark-maybe-load-default-file)
        (setq bookmarks (and (boundp 'bookmark-alist) bookmark-alist))

        ;; do the real thing
        (ivy-read "bookmarks:"
                  (delq nil (mapcar (lambda (bookmark)
                                      (let (key)
                                        ;; build key which will be displayed
                                        (cond
                                         ((and (assoc 'filename bookmark) (cdr (assoc 'filename bookmark)))
                                          (setq key (format "%s (%s)" (car bookmark) (cdr (assoc 'filename bookmark)))))
                                         ((and (assoc 'location bookmark) (cdr (assoc 'location bookmark)))
                                          ;; bmkp-jump-w3m is from bookmark+
                                          (unless (featurep 'bookmark+)
                                            (require 'bookmark+))
                                          (setq key (format "%s (%s)" (car bookmark) (cdr (assoc 'location bookmark)))))
                                         (t
                                          (setq key (car bookmark))))
                                        ;; re-shape the data so full bookmark be passed to ivy-read:action
                                        (cons key bookmark)))
                                    bookmarks))
                  :action (lambda (bookmark)
                            (bookmark-jump bookmark)))
        ))


    ;; Last visited bookmark on top
    (defadvice bookmark-jump (after bookmark-jump activate)
      (let ((latest (bookmark-get-bookmark bookmark)))
        (setq bookmark-alist (delq latest bookmark-alist))
        (add-to-list 'bookmark-alist latest)))
    )

#+END_SRC
** Mark with bm
Cara lain untuk pakai bookmark diambil dari [[https://github.com/joodland/bm][GitHub]]. Bolah tandah dibarisan dengan =C-f4=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bm
    :ensure t
    :demand t

    :init
    ;; where to store persistant files
    (setq bm-repository-file "~/.emacs.d/bm-repository")

    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)

    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers t)

    ;; ;; where to store persistant files
    ;; (setq bm-repository-file "~/.emacs.d/bm-repository")

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook' after-init-hook 'bm-repository-load)

    ;; Restoring bookmarks when on file find.
    (add-hook 'find-file-hooks 'bm-buffer-restore)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)


    ;; :bind (("<f4>" . bm-next)
    ;;        ("S-<f4>" . bm-previous)
    ;;        ("C-<f4>" . bm-toggle))
    )
#+END_SRC

* Avy-goto

| Kekunci | Fungsi         |
|---------+----------------|
| M-g-g   | avy-goto-line  |
| qg      | hydra-avy/body |
| M-g     | hydra-avy/body |

Guna seperti =ace-jump-mode= untuk mencari perkataan kemudian taip
=avy-key= utk terus ke tempat yg ingin dipilih

#+BEGIN_SRC emacs-lisp
  ;; (use-package avy
  ;;   :bind (("M-g l" . avy-goto-line)
  ;;          ("M-g w" . avy-goto-char-timer)
  ;;          ("M-g s" . avy-goto-word-1)
  ;;          ("M-g p" . avy-pop-mark))

  ;;   :config
  ;;   (setq avy-background t)
  ;;   (advice-add 'swiper :before 'avy-push-mark)
  ;;   (setq avy-keys
  ;;         '(?c ?a ?s ?d ?e ?f ?h ?w ?y ?j ?k ?l ?n ?m ?v ?r ?u ?p)))

  ;; Guna Hydra
  (use-package avy
    :ensure t
    :defer 1
    :config
    (use-package link-hint
      :ensure t)
    (global-set-key (kbd "C-c g") #'avy-goto-line)
    (defhydra hydra-avy-goto (:color blue
                                     :columns 8);(global-map "M-g")
      "avy-goto"
      ("g" avy-goto-line "line")
      ("c" avy-goto-char-timer "char")
      ("C" avy-goto-char-2 "char-2")
      ("w" avy-goto-word-1 "word")
      ("s" avy-goto-subword-1 "subword")
      ("u" link-hint-open-link "open-URI")
      ("U" link-hint-copy-link "copy-URI")
      ("q" nil "cancel" :color red))
    (advice-add 'swiper :before 'avy-push-mark)
    (setq avy-keys
          '(?c ?a ?s ?d ?e ?f ?h ?w ?y ?j ?k ?l ?n ?m ?v ?r ?u ?p))

    ;;== use key-chord
    (key-seq-define-global "qg" #'hydra-avy-goto/body)
    ;;(key-chord-define-global "qg" #'hydra-avy-goto/body)
    )
#+END_SRC

* Projectile
Projek yang diletakkan di github akan mudah dilawati dengan menggunakan =projectile=.

Utk masukkan projek ke [[http://projectile.readthedocs.io/en/latest/][Projectile]], buka projek fail dan hidupkan =projectile-mode=
di buffer tersebut. Untuk menggunakan =Projectile= di projek directory, gunakan komman
=M-x projectile-discover-projects-in-directory= atau kekunci =C-c M-p D=

Utk letakkan folder sebagai projek sekirannya tidak di git, buat fail kosong dan namakan =.projectile=

Aktivkan =Ivy= dengan =Projectile=.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :defer 1
    :bind (:map ybk/prog-map
                ;; find project
                ("p" . counsel-switch-project) ;boleh tukar project walaupun tidak di projectile buffer
                ;; project hydra
                ("P" . hydra-projectile/body))
    :init
    (setq projectile-cache-file (concat ybk/emacs-cache "projectile.cache"))
    (setq projectile-known-projects-file (concat ybk/emacs-cache "projectile-bookmarks.eld"))

    ;; Projectile hydra
    ;; https://github.com/abo-abo/hydra/wiki/Projectile
    (defhydra hydra-projectile-other-window (:color teal)
      "projectile-other-window"
      ("f"  projectile-find-file-other-window        "file")
      ("g"  projectile-find-file-dwim-other-window   "file dwim")
      ("d"  projectile-find-dir-other-window         "dir")
      ("b"  projectile-switch-to-buffer-other-window "buffer")
      ("q"  nil                                      "cancel" :color blue))

    (defhydra hydra-projectile (:color teal
                                       :hint nil)
      "
         PROJECTILE: %(projectile-project-root)

         Find File            Search/Tags          Buffers                Cache
    ------------------------------------------------------------------------------------------
      _f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
      _m_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
      _j_: file curr dir   _o_: multi-occur       _k_: Kill all buffers  _X_: cleanup non-existing
      _r_: recent file                                               ^^^^_z_: cache current
      _d_: dir

    "
      ("a"   projectile-ag)
      ("b"   projectile-switch-to-buffer)
      ("c"   projectile-invalidate-cache)
      ("d"   projectile-find-dir)
      ("f"   projectile-find-file)
      ("m"   projectile-find-file-dwim)
      ("j"   projectile-find-file-in-directory)
      ("g"   ggtags-update-tags)
      ("i"   projectile-ibuffer)
      ("k"   projectile-kill-buffers)
      ("o"   projectile-multi-occur)
      ("p|s" projectile-switch-project "switch project")
      ("s"   projectile-switch-project)
      ("p"   counsel-switch-project)
      ("r"   projectile-recentf)
      ("x"   projectile-remove-known-project)
      ("X"   projectile-cleanup-known-projects)
      ("z"   projectile-cache-current-file)
      ("w"   hydra-projectile-other-window/body "other window")
      ("q"   nil "cancel" :color blue))

    ;; ;; Simple Hydra projectile
    ;; (defhydra hydra-projectile (:color teal
    ;;                                    :columns 4)
    ;;   "PROJECTILE"
    ;;   ("f"   projectile-find-file                "Find File")
    ;;   ("r"   projectile-recentf                  "Recent Files")
    ;;   ("z"   projectile-cache-current-file       "Cache Current File")
    ;;   ("x"   projectile-remove-known-project     "Remove Known Project")

    ;;   ("d"   projectile-find-dir                 "Find Directory")
    ;;   ("b"   projectile-switch-to-buffer         "Switch to Buffer")
    ;;   ("c"   projectile-invalidate-cache         "Clear Cache")
    ;;   ("X"   projectile-cleanup-known-projects   "Cleanup Known Projects")

    ;;   ("o"   projectile-multi-occur              "Multi Occur")
    ;;   ("s"   projectile-switch-project           "Switch Project")
    ;;   ("k"   projectile-kill-buffers             "Kill Buffers")
    ;;   ("q"   nil "Cancel" :color blue))


    :config
    ;;hidupkan projectile
    (projectile-mode t)

    ;;integrerer ivy i projectile
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode 1))

    (setq projectile-completion-system 'ivy)

    ;; Tetapkan project folder
    ;; (setq projectile-project-search-path '("~/Git-work" "~/Git-personal"))

    ;; Don't consider my home dir as a project
    (add-to-list 'projectile-ignored-projects `,(concat (getenv "HOME") "/"))

    ;; catch projects
    (setq projectile-enable-caching t)

    ;; ;; utk git
    ;; (def-projectile-commander-method ?F
    ;;   "Git fetch."
    ;;   (magit-status)
    ;;   (call-interactively #'magit-fetch-current))

    ;; Berbeza dengan 'projectile-switch-project' sebab fungsi ini boleh dipakai
    ;; walaupun tidak di projectile buffer.
    (defun counsel-switch-project ()
      (interactive)
      (ivy-read "Switch to project: "
                projectile-known-projects
                :sort t
                :require-match t
                :preselect (when (projectile-project-p) (abbreviate-file-name (projectile-project-root)))
                :action '(1
                          ("o" projectile-switch-project-by-name "goto")
                          ("g" magit-status "magit")
                          ("s" (lambda (a) (setq default-directory a) (counsel-git-grep)) "git grep"))
                :caller 'counsel-switch-project))
    (bind-key* "C-c p p" 'counsel-switch-project)

    :diminish (projectile-mode . " "))

#+END_SRC
* Folding

Utk buka atau tutup kode.
** Simple style
Guna hideshow

#+BEGIN_SRC emacs-lisp :tangle no
(defun toggle-fold ()
  (interactive)
  (save-excursion
    (end-of-line)
    (hs-toggle-hiding))

  (bind-key "C-," #'toggle-fold )
#+END_SRC

** outline-magic

Berasaskan =outline-minor-mode= yang sedia ada di Emacs. Setting ini diambil dari [[https://github.com/Henry/dot-emacs/blob/master/init/init-outline.el][Github]]

#+BEGIN_SRC emacs-lisp
(let ((map outline-minor-mode-map))
  ;; SHOW
  (define-key map "\M-oa" 'show-all)          ; Show (expand) everything
  (define-key map "\M-oe" 'show-entry)        ; Show this heading's body
  (define-key map "\M-oi" 'show-children)     ; Show this heading's immediate child sub-headings
  (define-key map "\M-ok" 'show-branches)     ; Show all sub-headings under this heading
  (define-key map "\M-os" 'show-subtree)      ; Show (expand) everything in this heading & below
  ;; HIDE
  (define-key map "\M-oq" 'hide-sublevels)    ; Hide everything but the top-level headings
  (define-key map "\M-ot" 'hide-body)         ; Hide everything but headings (all body lines)
  (define-key map "\M-oo" 'hide-other)        ; Hide other branches
  (define-key map "\M-oc" 'hide-entry)        ; Hide this entry's body
  (define-key map "\M-ol" 'hide-leaves)       ; Hide body lines in this entry and sub-entries
  (define-key map "\M-od" 'hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; MOVE
  (define-key map "\M-ou" 'outline-up-heading)                ; Up
  (define-key map "\M-on" 'outline-next-visible-heading)      ; Next
  (define-key map "\M-op" 'outline-previous-visible-heading)  ; Previous
  (define-key map "\M-of" 'outline-forward-same-level)        ; Forward - same level
  (define-key map "\M-ob" 'outline-backward-same-level)       ; Backward - same level
  (define-key map [(meta o)(return)] 'outline-insert-heading) ; New heading
  (define-key map [(meta o)(up)] 'outline-move-subtree-up)    ; Move sub-tree up
  (define-key map [(meta o)(down)] 'outline-move-subtree-down); Move sub-tree down
  (define-key map [(meta o)(left)] 'outline-promote)          ; Promote sub-tree up
  (define-key map [(meta o)(right)] 'outline-demote))         ; Demote sub-tree up

;; -----------------------------------------------------------------------------
;;; outline-magic adds visibility cycling, promotion/demotion and
;;; sub-tree movement a la org-mode

(use-package outline-magic
  :ensure t)

;;;  Add the outline-magic visibility cycling key bindings

(add-hook 'outline-minor-mode-hook
          (lambda ()
            (require 'outline-magic)
            (define-key outline-minor-mode-map [S-iso-lefttab]
              'outline-cycle)
            (define-key outline-minor-mode-map [C-S-iso-lefttab]
              (lambda () (interactive) (outline-cycle '(4))))))

(add-hook 'outline-mode-hook
          (lambda ()
            (require 'outline-magic)
            (define-key outline-minor-mode-map [S-iso-lefttab]
              'outline-cycle)
            (define-key outline-minor-mode-map [C-S-iso-lefttab]
              (lambda () (interactive) (outline-cycle '(4))))))

#+END_SRC

** Vimish-fold
Guna =vimish-fold= dan =hideshow=. Diambil dari [[https://www.reddit.com/r/emacs/comments/btwg00/folding_combined_hideshow_and_vimishfold/][Reddit]]. Harus block region dahulu sebelum boleh pakai vimish-fold

#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
  :bind (("C-x f" . vimish-fold)
         ("C-x x" . vimish-fold-delete))
  :init
  (setq vimish-fold-dir (expand-file-name "vimish-fold/" ybk-personal-dir))
  :config
  (vimish-fold-global-mode 1))

(use-package hideshow
  :commands (hs-minor-mode
             hs-toggle-hiding)
  :init
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  :diminish hs-minor-mode
  :config
  (defun ybk-toggle-fold ()
    "Use `vimish-fold-toggle' if there's a fold at point.
If not, use `hs-toggle-hiding' instead.
If region is active, adds or removes vimish folds."
    (interactive)
    (if (region-active-p)
        (unless
            (ignore-errors (vimish-fold (region-beginning) (region-end)))
          (vimish-fold-delete))
      (unless (delq nil (mapcar #'vimish-fold--toggle (overlays-at (point))))
        (hs-toggle-hiding))))
  (bind-key "C-+" 'ybk-toggle-fold)
  )

#+END_SRC

* ESS
** R
Aturcara dan ESS snippet
*** Aturcara ESS
Untuk guna R. Kekunci yang berguna antaranya:
- =C-c C-d=   Pelbagai aturcara lain
- =C-c C-d e= ESSdescribe-object-at-point

Untuk tukar syntax highlight, boleh guna =menu= dan =Font-lock=

#+BEGIN_SRC emacs-lisp
  (use-package ess-site
    :ensure ess
    ;;:pin melpa-stable
    :bind
    (:map ess-mode-map ;ESS
          ("C-c s" . run-shiny-app)
          ("C-c C-g" . ess-describe-object-at-point)
          ("C-a" . crux-move-beginning-of-line)
          ("M--" . ess-insert-assign) ; assign <-
          ("_"   . self-insert-command)
          ("M-+" . my/dt-update)
          ("M-m" . my/add-match)
          ("M-." . ess-switch-process) ;sama dengan C-c C-s
          ("M-p" . my/add-pipe)
          ("C-|" . my/ess-eval-pipe-through-line)
          ("C-M-<return>" . ess-eval-region-or-function-or-paragraph-and-step)
          ("C-M--" . ess-eval-region-or-function-or-paragraph)
          :map inferior-ess-mode-map ;iESS
          ("M--" . ess-insert-assign)
          ("_"   . self-insert-command)
          ("M-+" . my/dt-update)
          ("M-m" . my/add-match)
          ("C-S-<up>" . ess-readline);previous cmd from script
          ;; :map ybk/r-map
          ;; ("." . ess-describe-object-at-point)
          ;; ("d" . ess-dev-map)
          ;; ("r" . ess-r-package-dev-map)
          )
    :init
    ;; Tetapkan Rsetting folder
    (defvar ybk/r-dir "~/Rsetting/") ;definere hvor epost skal vÃ¦re
    ;; lage direktori om ikke allerede finnes
    (unless (file-exists-p ybk/r-dir)
      (make-directory ybk/r-dir t))

    :config
    ;; ess-company
    ;; https://stackoverflow.com/questions/49232454/emacs-ess-how-to-auto-complete-library-function
    (defun my-ess-hook ()
      ;; ensure company-R-library is in ESS backends
      (make-local-variable 'company-backends)
      (cl-delete-if (lambda (x) (and (eq (car-safe x) 'company-R-args))) company-backends)
      (push (list 'company-R-args 'company-R-objects 'company-R-library :separate)
            company-backends))

    (add-hook 'ess-mode-hook 'my-ess-hook)

    ;; (with-eval-after-load 'ess
    ;;   (setq ess-use-company t))
    (setq ess-use-company t)

    ;; Quick help
    (define-key company-active-map (kbd "M-h") 'company-show-doc-buffer)

    ;; whitespace
    (setq ess-nuke-trailing-whitespace-p t)

    ;; pakai indentation cara RStudio
    (setq ess-default-style 'RStudio-)
    ;; (add-hook 'ess-mode-hook
    ;;           (lambda ()
    ;;             (ess-set-style 'RStudio)))

    (setq ess-eval-visibly 'nowait) ; don't hog Emacs
    (setq ess-ask-for-ess-directory nil) ; don't ask for dir when starting a process
    (setq ess-eldoc-show-on-symbol t) ; show eldoc on symbol instead of only inside of parens
    (setq ess-use-ido nil) ; rely on ivy instead of ido

    ;; History
    (setq ess-history-directory ybk/r-dir) ;tetapkan folder utk history
    (setq ess-history-file t) ;nil if not saving .Rhistory
    ;; (setq inferior-R-args "--no-restore-history --no-save") ;utk R comman not to restore and save Rhistory
    (setq inferior-R-args "--no-restore-history --vanilla") ; guna vanilla sebagai default utk reproducibility
    (setq ess-pdf-viewer-pref "emacsclient") ; guna pdf-tools

    ;; data.table update
    (defun my/dt-update ()
      "Adds a data.table update."
      (interactive)
      ;;(just-one-space 1) ;delete whitespace around cursor
      (insert " := "))

    ;; Match
    (defun my/add-match ()
      "Adds match."
      (interactive)
      (insert " %in% "))

    ;; pipe
    (defun my/add-pipe ()
      "Adds a pipe operator %>% with one space to the left and then
  starts a newline with proper indentation"
      (interactive)
      (just-one-space 1)
      (insert "%>%")
      (ess-newline-and-indent))

    ;; I sometimes want to evaluate just part of a piped sequence. The
    ;; following lets me do so without needing to insert blank lines or
    ;; something:
    (defun my/ess-beginning-of-pipe-or-end-of-line ()
      "Find point position of end of line or beginning of pipe %>%"
      (if (search-forward "%>%" (line-end-position) t)
          (let ((pos (progn
                       (beginning-of-line)
                       (search-forward "%>%" (line-end-position))
                       (backward-char 3)
                       (point))))
            (goto-char pos))
        (end-of-line)))

    (defun my/ess-eval-pipe-through-line (vis)
      "Like `ess-eval-paragraph' but only evaluates up to the pipe on this line.

  If no pipe, evaluate paragraph through the end of current line.

  Prefix arg VIS toggles visibility of ess-code as for `ess-eval-region'."
      (interactive "P")
      (save-excursion
        (let ((end (progn
                     (my/ess-beginning-of-pipe-or-end-of-line)
                     (point)))
              (beg (progn (backward-paragraph)
                          (ess-skip-blanks-forward 'multiline)
                          (point))))
          (ess-eval-region beg end vis))))

    ;; Get commands run from script or console
    ;; https://stackoverflow.com/questions/27307757/ess-retrieving-command-history-from-commands-entered-in-essr-inferior-mode-or
    (defun ess-readline ()
      "Move to previous command entered from script *or* R-process and copy
     to prompt for execution or editing"
      (interactive)
      ;; See how many times function was called
      (if (eq last-command 'ess-readline)
          (setq ess-readline-count (1+ ess-readline-count))
        (setq ess-readline-count 1))
      ;; Move to prompt and delete current input
      (comint-goto-process-mark)
      (end-of-buffer nil) ;; tweak here
      (comint-kill-input)
      ;; Copy n'th command in history where n = ess-readline-count
      (comint-previous-prompt ess-readline-count)
      (comint-copy-old-input)
      ;; Below is needed to update counter for sequential calls
      (setq this-command 'ess-readline)
      )

    ;; (global-set-key (kbd "\C-cp") 'ess-readline)
    )
#+END_SRC

*** ESS snippet
Diambil dari [[https://github.com/mattfidler/r-autoyas.el][GitHub]]. Pakai =TAB= untuk buka snippet. =Yasnippet= perlu dipasang untuk
memakai fungsi ini.

#+BEGIN_SRC emacs-lisp
  (use-package r-autoyas
    :ensure t
    ;;:pin melpa
    :bind (:map ybk/prog-map
                ;; Keluar yassnippet dan buang argument selebihnya yang tidak dipakai
                ("-" . r-autoyas-exit-snippet-delete-remaining))
    :config
    ;; Aktifkan yasnippet sebab diperlukan utk r-autoyas
    (require 'yasnippet)

    ;; Aktivkan di mode tertentu
    (add-hook 'ess-mode-hook #'r-autoyas-ess-activate)
    (add-hook 'markdown-mode-hook #'r-autoyas-ess-activate)

    ;; Tunjuk mesej untuk debugging
    (setq r-autoyas-debug t)

    ;; Masukkan personal function
    (setq r-autorays-expand-package-functions-only nil))
#+END_SRC
*** Deploy shiny app

|----+-----------|
| xs | run shiny |

Untuk buka Shiny app. Fail "deployApp.R" harus disediakan dan diletakkan di dalam
app-folder. Untuk larikan fungsi ini menggunakan =C-c s= atau =xs= mesti berada di app-folder.

Fail =deployApp.R= harus menggandungi kode ini:

#+BEGIN_EXAMPLE
 #!//usr/lib/R/bin/Rscript
 shiny::runApp('~/Git-work/traume/ntrApp', launch.browser = TRUE)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  ;; mesti ada fail ini di app-folder
  (setq deploy-file "deployApp.R")

  (defun run-shiny-app ()
    "Run app from any opened app files."
    (interactive)
    (let* (shiny-app)
      (setq shiny-app
            (expand-file-name deploy-file (file-name-directory (buffer-file-name))))
      (shell-command-to-string (format "Rscript %s" shiny-app))))

  (key-seq-define-global "xs" #'run-shiny-app)
#+END_SRC
*** TODO Tool-tips
Info boleh baca di [[https://github.com/mattfidler/EmacsMate/blob/master/EmacsMate-ess.org][sini]]. Tapi tidak berjaya diaktifkan. Perlu baca.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Via http://blogisticreflections.wordpress.com/2009/10/01/r-object-tooltips-in-ess/
  ;;
  ;; ess-R-object-tooltip.el
  ;;
  ;; I have defined a function, ess-R-object-tooltip, that when
  ;; invoked, will return a tooltip with some information about
  ;; the object at point.  The information returned is
  ;; determined by which R function is called.  This is controlled
  ;; by an alist, called ess-R-object-tooltip-alist.  The default is
  ;; given below.  The keys are the classes of R object that will
  ;; use the associated function.  For example, when the function
  ;; is called while point is on a factor object, a table of that
  ;; factor will be shown in the tooltip.  The objects must of course
  ;; exist in the associated inferior R process for this to work.
  ;; The special key "other" in the alist defines which function
  ;; to call when the class is not mached in the alist.  By default,
  ;; the str function is called, which is actually a fairly useful
  ;; default for data.frame and function objects.
  ;;
  ;; The last line of this file shows my default keybinding.
  ;; I simply save this file in a directory in my load-path
  ;; and then place (require 'ess-R-object-tooltip) in my .emacs

  ;; the alist
  (setq ess-R-object-tooltip-alist
        '((numeric    . "summary")
          (factor     . "table")
          (integer    . "summary")
          (lm         . "summary")
          (other      . "str")))

  (defun ess-R-object-tooltip ()
    "Get info for object at point, and display it in a tooltip."
    (interactive)
    (let ((objname (current-word))
          (curbuf (current-buffer))
          (tmpbuf (get-buffer-create "**ess-R-object-tooltip**")))
      (if objname
          (progn
            (ess-command (concat "class(" objname ")\n")  tmpbuf )
            (set-buffer tmpbuf)
            (let ((bs (buffer-string)))
              (if (not(string-match "\(object .* not found\)\|unexpected" bs))
                  (let* ((objcls (buffer-substring
                                  (+ 2 (string-match "\".*\"" bs))
                                  (- (point-max) 2)))
                         (myfun (cdr(assoc-string objcls
                                                  ess-R-object-tooltip-alist))))
                    (progn
                      (if (eq myfun nil)
                          (setq myfun
                                (cdr(assoc-string "other"
                                                  ess-R-object-tooltip-alist))))
                      (ess-command (concat myfun "(" objname ")\n") tmpbuf)
                      (let ((bs (buffer-string)))
                        (progn
                          (set-buffer curbuf)
                          (tooltip-show-at-point bs 0 30)))))))))
      (kill-buffer tmpbuf)))

  ;; my default key map
  (define-key ess-mode-map "\C-c\C-g" 'ess-R-object-tooltip)

  (provide 'ess-R-object-tooltip)
#+END_SRC

*** Test R buffer
Buka buffer untuk test fungsi R dll guna =R-mode=. Fungsi ini dimodifikasikan dari
[[http://ergoemacs.org/emacs/emacs_new_empty_buffer.html][ErgoEmacs]].

#+BEGIN_SRC emacs-lisp
  (defun test-R-buffer ()
    "Create a new empty buffer with R-mode."
    (interactive)
    (let (($buf (generate-new-buffer "*r-test*"))
          (test-mode2 (quote R-mode)))
      (switch-to-buffer $buf)
      (insert (format "## == Test %s == \n\n" "R script"))
      (funcall test-mode2)
      (setq buffer-offer-save t)
      $buf
      ))

  (global-set-key (kbd "C-c x") 'test-R-buffer)
#+END_SRC
*** Log file
Untuk buka log file secara langsung. Log file harus diletakkan di folder =doc=.

#+BEGIN_SRC emacs-lisp
  (setq R-log-file "log.org")

  (defun ybk-log-file ()
    "buka log file"
    (interactive)
    (find-file (expand-file-name R-log-file "./documents/")))
#+END_SRC

*** Debug keys
=ess-tracebug= aktiv secara automatik dan untuk mematikan boleh tetapkan =(setq
ess-use-tracebug nil)=. Untuk penggunaan debug guna kekuci =C-c C-t= [ess-dev-map]
untuk dapatkan semua kekunci. Hydra utk ess-debug pakai =jx= atau =F9=

Untuk penerangan mendalam baca di [[https://code.google.com/archive/p/ess-tracebug/][ess-tracedebug]]. Untuk keluar dari browser pakai
=c + Return= dan fungsi akan diteruskan. Untuk matikan debugging dan kembali ke
console pakai =Q + Return=.

Bila debugging, kekuci ini boleh dipakai

|------------+---------------------------|
| Kekuci     | Fungsi                    |
|------------+---------------------------|
| F9 atau jx | hydra-r-debug             |
| M-C        | Teruskan (continue)       |
| M-C-C      | Teruskan pelbagai (multi) |
| M-C-N      | Next step multi           |
| M-Q        | quit                      |
| C-x M-g n  | next-error                |
| C-x M-g p  | pervious-error            |
|------------+---------------------------|

Guna =F9= *hydra-ybk-r-debug* bila di ess-mode untuk dapatkan kekuci di bawah:

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-ybk-r-debug (:hint nil)
    "
     ^ESS R-debug  'C-c C-t' r-dev-map. F9 or 'jx'^

     ^Debug         ^Package^             ^^Break point^               ^Misc
     ^--------------^-----------------------^---------------------------^----------------
     _o_: object     _l_: load  _t_: test    _b_: set    _k_: kill       _r_: test-function
     _a_: devtools   _d_: doc   _c_: check   _n_: next   _K_: kill all   _g_: log-file
     _e_: traceback                      ^^^^_p_: prev
    "
    ("o" ess-describe-object-at-point)
    ("b" ess-bp-set)
    ("k" ess-bp-kill)
    ("K" ess-bp-kill-all)

    ("n" ess-bp-next)
    ("p" ess-bp-previous)
    ("a" ess-r-devtools-ask)
    ("l" ess-r-devtools-load-package)
    ("c" ess-r-devtools-check-package)

    ("e" ess-show-traceback)
    ("d" ess-r-devtools-document-package)
    ("t" ess-r-devtools-test-package)

    ("r" test-R-buffer)
    ("g" ybk-log-file)

    ("q" nil "KELUAR"))


  ;;== key-binding
  (key-seq-define-global "jx" 'hydra-ybk-r-debug/body)
  (global-set-key (kbd "<f9>") 'hydra-ybk-r-debug/body)
#+END_SRC

*** Flycheck-julia
Periksa kode di ESS. Diambil dari [[https://github.com/gdkrmr/flycheck-julia][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-julia
    :ensure flycheck
    :config
    ;; loads ess, which contains ess-julia-mode
    (require 'ess-site)
    ;; enable flycheck globally
    (add-hook 'after-init-hook #'global-flycheck-mode)

    (flycheck-julia-setup))
#+END_SRC

*** Buka data.frame
**** ESS-view
Untuk view data.frame di speadsheet software seperti Excel atau Calc. Untuk lihat
dataframe pakai kekunci =C-x w=. Untuk buka dataframe dan edit kemudian dimasukkan
semula ke R gunakan kekunci =C-x q=
#+BEGIN_SRC emacs-lisp
  (use-package ess-view
    :ensure t)
#+END_SRC
*** Tips
Beberapa tips yang boleh memudahkan kerja:

1. data.table
Bila pakai =data.table= untuk memmakai /autocomplete/ boleh guna =M-/=. Contohnya
untuk dapatkan nama variable =Inn_konts= di DT, boleh taip =M-/= selepas =Inn=:

#+BEGIN_EXAMPLE
DT[Inn{M-/}]
#+END_EXAMPLE

** Stata
Untuk guna Stata di ESS
*** Tetapkan dimana Stata dipasang
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ess-site
    :ensure ess
    :mode (("\\.do" . stata-mode)
           ("\\.ado" . stata-mode))

    :init
    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/stata"))
    (setq exec-path (append exec-path '("/usr/local/stata")))

    :config
    (require 'ess-stata-mode)
    )
#+END_SRC
*** Stata guna Ado-mode
Download =ado-mode= dari Github atau di [[https://www.louabill.org/Stata/ado-mode_install.html][sini]]
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ado-mode
    :load-path "~/Dropbox/lisp/ado-mode/lisp"
    :init
    (setq auto-mode-alist (append (list '("\\\\.ado\\\\'" . ado-mode)
                                        '("\\.do\\'" . ado-mode))
                                  auto-mode-alist))
    )
#+END_SRC

* Markdown
Markdown mode for Markdown editing! Guna =Pandoc= utk view. Pandoc harus di install
terlebih dahulu.

ESS mode harus diaktifkan utk aktifkan =ess-company=

#+BEGIN_EXAMPLE
sudo apt install pandoc
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :config
    ;;(setq markdown-enable-math t)

    ;;Guna Pandoc utk view
    (custom-set-variables '(markdown-command "pandoc")))
#+END_SRC

Of course, markdown contains a yaml header, so we need yaml-mode as well:

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (("\\.yml\\'" . yaml-mode)))
#+END_SRC

** Tips
- Untuk tunjuk atau sembunyikan =heading= boleh pakai =Shift-Tab= bila cursor di
  header.

* Polymode (for knitr)
Mode ini dipakai untuk membuat dokumen yang menggunakan program R.
** Aturcara
Sweave atau knitr

|-----+-------------------|
| key | fungsi            |
|-----+-------------------|
| js  | hydra-Rmd (knitr) |
|     |                   |

Polymode is a (relatively new) way of working with multiple major modes. This is
especially helpful if we want to use latex or markdown together with R code. The
process is as follows:

#+begin_src ditaa :file ~/Test/ditaa-rmd.png
  +------+   +-----+   +-----+   +------+  +-------\
  |{io}  |   |{d}  |   |{s}  |   |cBLU  |  | Doc   |
  | Rmd  +-->+Knitr+-->+ md  +-->+Pandoc+->| Pdf   |
  |      |   |     |   |     |   |      |  | html  |
  +------+   +-----+   +--+--+   +------+  \-------+
#+end_src

[[~/Test/ditaa-rmd.png]]

Default key to access polymode is =M-n=. Markdown atau Pandoc diperlukan utk proses ke html

NB! Utk aktifkan ~ess-company~ dan ~ElDoc~ utk bantuan function call args di R-chuck mesti buka R-prog di background dulu

#+BEGIN_SRC emacs-lisp
  ;; Code highlighting via polymode
  (use-package markdown-mode
    :ensure t
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "markdown")
    )

  (use-package polymode
    :ensure markdown-mode
    :ensure poly-R
    :ensure poly-noweb
    :config
    ;; R/tex polymodes
    (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode))
    (add-to-list 'auto-mode-alist '("\\.rnw" . poly-noweb+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
    ;; org-mode poly (not working at the moment)
    ;; (add-to-list 'auto-mode-alist '("\\.org" . poly-org-mode))
    ;; Make sure r-mode is loaded
    ;; (autoload 'r-mode "ess-site.el" "Major mode for editing R source." t)

    ;; Add a chunk for rmarkdown
    ;; Need to add a keyboard shortcut
    ;; https://emacs.stackexchange.com/questions/27405/insert-code-chunk-in-r-markdown-with-yasnippet-and-polymode
    ;; (defun insert-r-chunk (header)
    ;;   "Insert an r-chunk in markdown mode. Necessary due to interactions between polymode and yas snippet"
    ;;   (interactive "sHeader: ")
    ;;   (insert (concat "```{r " header "}\n\n\n```"))
    ;;   (forward-line -2))
    ;; (define-key poly-markdown+r-mode-map (kbd "M-c") #'insert-r-chunk)
    )

  (use-package poly-markdown
    :ensure polymode
    :defer t
    :config
    ;; Wrap lines at column limit, but don't put hard returns in
    (add-hook 'markdown-mode-hook (lambda () (visual-line-mode 1)))
    ;; Flyspell on
    (add-hook 'markdown-mode-hook (lambda () (flyspell-mode 1)))
    )

  ;; poly-R
  (use-package poly-R
    :ensure polymode
    :ensure poly-markdown
    :ensure poly-noweb
    :defer t
    :config
    ;; Add a chunk for rmarkdown
    ;; Need to add a keyboard shortcut
    ;; https://emacs.stackexchange.com/questions/27405/insert-code-chunk-in-r-markdown-with-yasnippet-and-polymode
    ;; (defun insert-r-chunk (header)
    ;;   "Insert an r-chunk in markdown mode. Necessary due to interactions between polymode and yas snippet"
    ;;   (interactive "sHeader: ")
    ;;   (insert (concat "```{r " header "}\n\n\n```"))
    ;;   (forward-line -2))
    ;; (define-key poly-markdown+r-mode-map (kbd "M-c") #'insert-r-chunk)
    )

  ;; Add yaml to markdown an .yml files
  (use-package yaml-mode
    :ensure t
    :mode (("\\.yml\\'" . yaml-mode)))
#+END_SRC

** Masukkan chunk
Untuk memasukkan =r-chunck= di polymode.

#+BEGIN_SRC emacs-lisp
  ;;Masukkan R-chunk M-n M-i
  (defun polymode-insert-new-chunk ()
    (interactive)
    (insert "\n```{r}\n")
    (save-excursion
      (newline)
      (insert "```\n")
      (previous-line)))

  ;; Masukkan R-chunk cara lain
  ;; https://emacs.stackexchange.com/questions/27405/insert-code-chunk-in-r-markdown-with-yasnippet-and-polymode
  (defun rmd-insert-r-chunk (header)
    "Insert an r-chunk in markdown mode. Necessary due to interactions between polymode and yas snippet"
    (interactive "sHeader: ")
    (insert (concat "```{r " header "}\n\n```"))
    (forward-line -1))
#+END_SRC

** Menilai atau proseskan chunk
Untuk dapatkan hasilan dari chunk, boleh diproses chunk satu persatu atau semuanya serentak.
#+BEGIN_SRC emacs-lisp
  ;;Evaluate chunck
  ;;https://stackoverflow.com/questions/40894202/execute-all-r-chunks-at-once-from-an-rmd-document
  (eval-when-compile
    (require 'polymode-core)  ;; SO format :('
    (defvar pm/chunkmode))
  (declare-function pm-map-over-spans "polymode-core")
  (declare-function pm-narrow-to-span "polymode-core")

  ;; Nilai satu persatu
  (defun rmd-eval-chunk ()
    "Send current R chunk to ess process."
    (interactive)
    (and (eq (oref pm/chunkmode :mode) 'r-mode) ;;'
         (pm-with-narrowed-to-span nil
           (goto-char (point-min))
           (forward-line)
           (ess-eval-region (point) (point-max) nil nil 'R)))) ;;'

  ;; Nilai semua serentak
  (defun rmd-eval-buffer (arg)
    "Send all R code blocks in buffer to ess process. With prefix
    send regions above point."
    (interactive "P")
    (save-restriction
      (widen)
      (save-excursion
        (pm-map-over-spans
         'rmd-eval-chunk (point-min) ;;'
         ;; adjust this point to send prior regions
         (if arg (point) (point-max))))))
#+END_SRC

** Sembunyikan chunk
Pakai pakej [[https://github.com/magnars/fold-this.el][fold-this]] dan aturcara diambil dari [[https://github.com/brendan-r/dotemacs/blob/b601eb09e227d1a0ec3220a79884a743e4027e5a/init.el#L821-L843][Brendan]].

#+BEGIN_SRC emacs-lisp
  (use-package fold-this
    :ensure t
    :bind (:map ybk/prog-map
                ("+" . rmd-fold-block)
                ("*" . rmd-fold-all-blocks)
                ([?\\] . fold-this-unfold-all))
    :config
    ;; Fold chunck
    ;; https://github.com/brendan-r/dotemacs/blob/b601eb09e227d1a0ec3220a79884a743e4027e5a/init.el#L821-L843
    (defun rmd-fold-block ()
      "Fold the contents of the current R block, in an Rmarkdown file (can be undone
     with fold-this-unfold-at-point)"
      (interactive)
      (and (eq (oref pm/chunkmode :mode) 'r-mode)
           (pm-with-narrowed-to-span nil
             (goto-char (point-min))
             (forward-line)
             (fold-this (point) (point-max)))))

    ;; E.g. to send a prefix, use C-u M-x rmd-send-buffer
    (defun rmd-fold-all-blocks (arg)
      "Fold all R blocks in an Rmarkdown file (can be undone with
     fold-this-unfold-all)"
      ;; Interactive, with a prefix argument
      (interactive "P")
      (save-restriction
        (widen)
        (save-excursion
          (pm-map-over-spans
           'rmd-fold-block (point-min)
           ;; adjust this point to fold prior regions
           (if arg (point) (point-max)))))))
#+END_SRC

** Compile Rmd file
Fungsi ini menggunakan informasi YAML di fail Rmd untuk menetapkan jenis fail samada
PDF, HTML atau DOCX seperti di =RStudio=. Diambil dari [[https://gist.github.com/benmarwick/ee0f400b14af87a57e4a][gist]].

contoh YAML:
#+BEGIN_EXAMPLE
  ---
  title: "Tajuk dokumen"
  author: "Nama penulis"
  date: "2 november 2017"
  output: pdf_document
  ---
#+END_EXAMPLE

Sekiranya ingin mendapatkan pelbagai jenis dokumen boleh ditetapkan seperti di bawah
tetapi diproses dengan menggunakan kekunci standard polymode =M-n e=

#+BEGIN_EXAMPLE
  ---
  title: "Tajuk dokumen"
  author: "Nama penulis"
  date: "2 november 2017"
  output:
    pdf_document: default
    html_document: default
    word_document: default
  ---

#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun poly-ess-rmarkdown ()
    "Compile R markdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
        (ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
        (let* ((sprocess (ess-get-process ess-current-process-name))
               (sbuffer (process-buffer sprocess))
               (buf-coding (symbol-name buffer-file-coding-system))
               (R-cmd
                (format "library(rmarkdown); rmarkdown::render(\"%s\")"
                        buffer-file-name)))
          (message "Running rmarkdown on %s" buffer-file-name)
          (ess-execute R-cmd 'buffer nil nil)
          (switch-to-buffer rmd-buf)
          (ess-show-buffer (buffer-name sbuffer) nil)))))

  ;; (define-key polymode-mode-map "\M-ns" 'ess-rmarkdown)
  ;; (bind-key "d" #'ess-rmarkdown ybk/prog-map)
#+END_SRC

* Pandoc
Guna =pandoc-mode=. Untuk rujukkan boleh baca di [[http://joostkremers.github.io/pandoc-mode/][manual]]. Dapatkan menu dengan key
=C-c /=. Pandoc dipakai terutama utk tukar fail .docx

#+BEGIN_SRC emacs-lisp
  (use-package pandoc-mode
    :ensure t
    )
#+END_SRC

* LaTeX
AuCTeX diguna sebab ia lebih bagus dari yang tersedia (build in) tex mode. Penggunaan
yang tersedia di AuCTeX diubahsuai dan menggunakan =latexmk= untuk tukarkan fail ke
pdf tanpa perlu melarikan fail banyak kali untuk tetapkan rujukan-rujukan secara
betul. Tapi latexmk harus dipasang dan cara senang ialah menggunakan Synaptic.

Untuk memproses fail =.Rnw= atau =.Rmd= ke PDF harus memasang *TeX-Live*. Cara untuk
pasang di Ubuntu 18.04 Bionic Beaver boleh baca di [[https://linuxconfig.org/how-to-install-latex-on-ubuntu-18-04-bionic-beaver-linux][sini]].

#+BEGIN_EXAMPLE
  $ sudo apt update
  $ sudo apt install texlive
#+END_EXAMPLE

Atau pasang =texlive-latex-extra= dan =texlive-science= sebab =texlive-full= bersize
besar. File =texlive-science= untuk dapatkan pakej ~siunitx.sty~.

Pastikan fail-fail ini dipasang sebelum melarikan fail =.Rnw= di *ESS*

#+BEGIN_EXAMPLE
apt install libssl-dev libcurl4-openssl-dev libxml2-dev libmagick++-dev
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex-site
    :ensure auctex
    :config
    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
    (setq TeX-auto-save t
          TeX-parse-self t
          reftex-plug-into-AUCTeX t)
    (add-hook 'LaTeX-mode-hook 'reftex-mode)
    (add-hook 'LaTeX-mode-hook #'TeX-PDF-mode)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-mode t)
    (eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -pdf %s"
                                        TeX-run-compile nil t :help "Process file with latexmk")))
    (eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -xelatex %s"
                                        TeX-run-compile nil t :help "Process file with xelatexmk")))
    (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "latexmk")))

    ;; Stop littering everywhere with auto/ directories
    (setq-default TeX-auto-local
                  (expand-file-name "auctex/auto" (concat user-emacs-directory "var")))

    ;; Some extra files generated by xelatexmk that I don't generally
    ;; want to keep:
    (push ".synctex.gz" completion-ignored-extensions)
    (push ".fdb_latexmk" completion-ignored-extensions)
    (push ".fls" completion-ignored-extensions)
    ;; (push "\\.fdb_latexmk" LaTeX-clean-intermediate-suffixes)
    ;; (push "\\.fls" LaTeX-clean-intermediate-suffixes)
    ;; (push "\\.synctex.gz" LaTeX-clean-intermediate-suffixes)
    (setq TeX-clean-confirm nil)

    ;; ;; to use pdfview with auctex - setting sudah di letak di PDF-Tools
    ;; (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
    ;;       TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
    ;;       TeX-source-correlate-start-server t) ;; not sure if last line is neccessary

    ;; revert pdf from file after compilation finishes
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

    ;; (use-package latex
    ;;   :bind
    ;;   (:map LaTeX-mode-map
    ;;         ("M-p" . outline-previous-visible-heading)
    ;;         ("M-n" . outline-next-visible-heading)))
    )

#+END_SRC

Finally, sometimes we want wordcounts. If I just want a quick snippet, I can run the
following command. If I want more information, I can drop into a shell with ~C-c M-e~
(~shell-pop~) and run ~texcount my-file.tex~:

#+BEGIN_SRC emacs-lisp
  (defun latex-word-count ()
    (interactive)
    (let* ((this-file (buffer-file-name))
           (word-count
            (with-output-to-string
              (with-current-buffer standard-output
                (call-process "texcount" nil t nil "-brief" this-file)))))
      (string-match "\n$" word-count)
      (message (replace-match "" nil nil word-count))))
#+END_SRC

** Reftex
I use =helm-bibtex= to manage my references, but ReFTeX is still great to have around
for cross-references in latex files.

You will need to change ~reftex-default-bibliography~ to wherever you keep your main .bib file.

#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :commands turn-on-reftex
    :init
    (setq reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\citet{%l}")
            (?p . "\\citep[]{%l}")
            (?a . "\\autocite{%l}")
            (?A . "\\textcite{%l}")
            (?P . "[@%l]")
            (?T . "@%l [p. ]")
            (?x . "[]{%l}")
            (?X . "{%l}")))
    (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))
    (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
    (setq reftex-extra-bindings t)
    :config
    (add-hook 'LaTeX-mode-hook #'turn-on-reftex))
#+END_SRC

** Latex math
Cdlatex lets me write latex in org-mode. It's particularly useful for math. [[https://www.gnu.org/software/emacs/manual/html_node/org/CDLaTeX-mode.html][doc]]

#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-cdlatex-mode))
#+END_SRC

* Recent files
Utk tetapkan kekerapan menyimpan =recentf= supaya "recent file" tidak hilang kalau
Emacs sangkut. Simpan setaip 5 minit. Untuk buka recent file guna =C-x 9= yang
ditetapkan di =Ivy= atau =C-x C-r= dari [[https://www.emacswiki.org/emacs/RecentFiles][Wiki]]

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    ;;:bind ("C-x C-r" . recentf-open-files)
    :ensure sync-recentf
    :init
    (setq recentf-save-file (concat ybk/emacs-cache "recentf"))
    :config
    (recentf-mode 1)

    ;; Bersihkan recent file list dan sync setiap 60 saat
    (setq recentf-auto-cleanup 60)

    ;; Kekerapan utk simpan file
    (run-at-time nil (* 10 60) 'recentf-save-list))
#+END_SRC

* Tunjuk beza (ediff)
** Ediff
Untuk melihat perbezaan antara dua fail menggunakan =ediff=. Aturcara ini diambil dari =[[https://oremacs.com/2015/01/17/setting-up-ediff/][Oremacs]]=

#+BEGIN_SRC emacs-lisp
  ;; Tidak gunakan separate frame utk control panel
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Asingkan window melintang
  (setq ediff-split-window-function 'split-window-horizontally)

  ;; Abaikan whitespace
  (setq ediff-diff-options "-w")

  ;; Bagi key bindings
  (defun ora-ediff-hook ()
    (ediff-setup-keymap)
    (define-key ediff-mode-map "j" 'ediff-next-difference)
    (define-key ediff-mode-map "k" 'ediff-previous-difference))

  (add-hook 'ediff-mode-hook 'ora-ediff-hook)

  ;; Pasang semula window configuration bila keluar (q)
  ;; (winner-mode) ;aktifkan winner-mode kalau tidak dipasang secara global
  (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
#+END_SRC

** Backup-walker
Untuk menunjukkan =diff= file semasa dan file sebelumnya sekiranya fail ada di
/backup/. Boleh guna =blame= atau =backup-walker=

#+BEGIN_SRC emacs-lisp
  (use-package backup-walker
    :ensure t
    :bind ("C-c w s" . backup-walker-start))
#+END_SRC
** Diffview
Show side-by-side [[https://github.com/mgalgs/diffview-mode/tree/031b70913e755c5e55222680f80185032a7d1728][github]]

#+BEGIN_SRC emacs-lisp
(use-package diffview
  :bind (("C-c b 1" . diffview-current)
         ("C-c b 2" . diffview-region)
         ("C-c b 3" . diffview-message))
  )
#+END_SRC
** Vdiff
Just like Vimdiff for Emacs [[https://github.com/justbur/emacs-vdiff/tree/09e15fc932bfd2febe1d4a65780a532394562b07][github]]

#+BEGIN_SRC emacs-lisp
(use-package vdiff
  :config
  ;; Bind most command under the C-c prefix
  (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map))
#+END_SRC

* Version control

| Kekunci | Fungsi           |
|---------+------------------|
| f12-g   | hydra-magit/body |
| C-x g s | Magit-status     |
| C-x g c | Magit-clone      |
| C-x g p | Magit-pull       |


| Git options | Fungsi                              |
|-------------+-------------------------------------|
| fetch --all | fetch semua                         |
| branch -v   | Tunjuk last commit utk semua branch |
| branch -vv  | Tunjuk tracking branches            |
| branch -u   | Tetapkan upstream                   |

** Git
Untuk pakai git command line:
- Utk periksa last commit. Boleh pakai salah satu
#+BEGIN_EXAMPLE
  git log -1 --stat
  git show
#+END_EXAMPLE
** Magit
Utk guna Github. Utk kali pertama perlu =git config= di
terminal. Sekiranya masalah utk pasang dari *Melpa* coba =M-x
package-refresh-contents=

#+BEGIN_EXAMPLE
  git config --global user.name "bla bla bla"
  git config --global user.email "youremail@uremail.com"
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands magit-get-top-dir
    ;;:pin melpa-stable
    :bind (("C-x g s" . magit-status)
           ("C-x g c" . magit-clone)
           ("C-x g p" . magit-pull)
           ("C-x g l" . magit-log-buffer-file)
           ("C-x g b" . magit-blame)
           ("C-x g m" . hydra/magit-body))
    :init
    (progn
      ;; we no longer need vc-git
      (delete 'Git vc-handled-backends)
      ;; make magit status go full-screen but remember previous window
      ;; settings
      ;; from: http://whattheemacsd.com/setup-magit.el-01.html
      (defadvice magit-status (around magit-fullscreen activate)
        (window-configuration-to-register :magit-fullscreen)
        ad-do-it
        (delete-other-windows))

      ;; Close popup when commiting - this stops the commit window
      ;; hanging around
      ;; From: http://git.io/rPBE0Q
      (defadvice git-commit-commit (after delete-window activate)
        (delete-window))

      (defadvice git-commit-abort (after delete-window activate)
        (delete-window))

      ;; these two force a new line to be inserted into a commit window,
      ;; which stops the invalid style showing up.
      ;; From: http://git.io/rPBE0Q
      (defun magit-commit-mode-init ()
        (when (looking-at "\n")
          (open-line 1)))

      (add-hook 'git-commit-mode-hook 'magit-commit-mode-init)

      ;;  ;;== Hydra magit ===
      ;;  (defhydra hydra-magit (:color teal
      ;;     :column 5)
      ;; "Magit"
      ;; ("s" magit-status "status")
      ;; ("f" magit-fetch "fetch")
      ;; ("d" magit-diff "diff")
      ;; ("c" magit-clone "clone")
      ;; ("p" magit-pull "pull")
      ;; ("m" magit-merge "merge")
      ;; ("o" magit-checkout "checkout")
      ;; ("b" magit-branch-popup "branch manager")
      ;; ("u" magit-branch-and-checkout "branch and checkout")
      ;; ("l" magit-log "log")
      ;; ("!" magit-git-command "command")
      ;; ("$" magit-process "process")
      ;; ("q" nil "quit" :color red))

      (defhydra hydra-magit (:hint nil)

        "
   ^Kunci magit/GIT^
   ^^^^^^^^----------------
   _s_: status     _f_: fetch      _o_: checkout    _b_: branch manager        _k_: branch delete
   _d_: diff       _c_: clone      _l_: log buffer  _u_: branch and checkout   _!_: command
   _p_: pull       _m_: merge      _L_: log         _U_: branch orphan         _a_: blame          _q_: keluar

        "
        ("s" magit-status)
        ("f" magit-fetch)
        ("d" magit-diff)
        ("c" magit-clone)
        ("p" magit-pull )
        ("m" magit-merge)
        ("o" magit-checkout)
        ("b" magit-branch-popup)
        ("u" magit-branch-and-checkout)
        ("U" magit-branch-orphan)
        ("L" magit-log)
        ("l" magit-log-buffer-file)
        ("!" magit-git-command)
        ("k" magit-branch-delete)
        ("a" magit-blame-popup)
        ("q" (message "Selesai") :exit t)
        )

      ;;(key-chord-define-global "jg" #'hydra-magit/body)
      (key-seq-define-global "jg" #'hydra-magit/body)
      (bind-key "g" #'hydra-magit/body 'ybk/prog-map)
      )

    :config
    ;; restore previously hidden windows
    (defadvice magit-quit-window (around magit-restore-screen activate)
      (let ((current-mode major-mode))
        ad-do-it
        ;; we only want to jump to register when the last seen buffer
        ;; was a magit-status buffer.
        (when (eq 'magit-status-mode current-mode)
          (jump-to-register :magit-fullscreen))))

    (defun magit-maybe-commit (&optional show-options)
      "Runs magit-commit unless prefix is passed"
      (interactive "P")
      (if show-options
          (magit-key-mode-popup-committing)
        (magit-commit)))

    ;;  ;; major mode for editing `git rebase -i` files
    ;;  (use-package rebase-mode
    ;; :defer 2)

    (define-key magit-mode-map "c" 'magit-maybe-commit)

    ;; magit settings
    (setq
     ;; use ivy to look for branches
     magit-completing-read-function 'ivy-completing-read
     ;; don't put "origin-" in front of new branch names by default
     magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
     ;; open magit status in same window as current buffer
     magit-status-buffer-switch-function 'switch-to-buffer
     ;; highlight word/letter changes in hunk diffs
     magit-diff-refine-hunk t
     ;; ask me if I want to include a revision when rewriting
     magit-rewrite-inclusive 'ask
     ;; ask me to save buffers
     magit-save-some-buffers t
     ;; pop the process buffer if we're taking a while to complete
     magit-process-popup-time 30
     ;; ask me if I want a tracking upstream
     magit-set-upstream-on-push 'askifnotset
     ))
#+END_SRC

#+RESULTS:
** Diff highlights
Menanda secara langsung pertukaran di dokument. Rujuk [[https://github.com/nonsequitur/git-gutter-plus][Github]].
"+" menandakan tambahan dan "Â¤" menandakan pertukaran

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter+
    :ensure t
    ;; :diminish git-gutter+-mode
    ;; :init
    ;; (global-git-gutter+-mode)

    :bind (("s-g" . git-gutter+-mode) ;super-g
           :map git-gutter+-mode
           ;; Jump between hunks
           ("C-x n" . git-gutter+-next-hunk)
           ("C-x p" . git-gutter+-previous-hunk)
           ;; Act on hunks
           ("C-x v =" . git-gutter+-show-hunk)
           ;; Stage hunk at point
           ("C-x c" . git-gutter+-commit)
           ("C-x C" . git-gutter+-stage-and-commit);on/off current-buffer
           ("C-x U" . git-gutter+-unstage-whole-buffer))
    :config
    (setq git-gutter+-modified-sign "#")

    (defface git-gutter+-modified
      '((t (:foreground "orange" :weight bold)))
      "Face for modified lines"
      :group 'git-gutter+)

    ;; Aktivere i ESS og markdown
    (add-hook 'ess-mode-hook #'git-gutter+-mode)
    (add-hook 'markdown-mode-hook #'git-gutter+-mode)
    )
#+END_SRC

** Cara pakai repo baru
Cara utk memuatpasang repo baru ke =Github= ialah:
+ Buat Repo baru di [[https://github.com][Github]] samada [[https://github.com/yusbk][Personal]] atau [[https://github.com/ybkamaleri][Work]]
+ =M-x magit-init= utk branch repo baru
+ Sahkan repo baru di =Github=
+ Pilih fails utk dimasukkan ke =stage= dgn menekan kekunci =s=
+ =Commit= dengan menekan kekunci =c= dan tulis maklumat utk =commit=
+ =C-c C-c= utk =commit=
+ =M-x magit-remote-add= utk menetapkan =remote add origin= seperti menggunakkan
  komando di =git=
+ Berikan =remote name= cth. aimPlot
+ Berikan =remote URL= cth. https://github.com/yusbk/InitEmacs.git atau pakai kekunci
  =SSH= sekiranya sudah dipasang. Utk alamat url yg betul boleh dikopi dari Github
+ =M-x f= utk tarikturun (=fetch/pull=) sebarang fail yg terdapat di repo
  cth. README.md sebelum =push=. Fail yg sama nama di =master= harus dibuang
+ =M-x p= utk muatpasang atau =push= *master* ke *origin* di repo baru.

** Tips and tricks
Beberapa tips utk membantu memudahkan penggunaan =Magit=

+ "Branch manager" =magit-show-refs-popup= kekunci ialah =y=.
+ Buang commit di 'remote' boleh pakai force push =P -fp= utk push-remote atau =P
  -fu= utk upstream.
+ Utk ambil repo baru pakai =M-x magit-clone=
  https://github.com/<pengguna>/<repo.git>
* Weather
Cuaca semasa dari [[https://www.met.no/][Meteorologisk institutt]]. Aturcara boleh di lihat di [[https://github.com/ruediger/weather-metno-el][GitHub]]. Untuk
lihat cuaca tempat lain boleh pakai =M-x weather-metno-forecast-location= atau =F10-b=

#+BEGIN_SRC emacs-lisp
  (use-package weather-metno
    :ensure t
    :bind (("<f10> w" . weather-metno-forecast)
           ("<f10> u" . weather-metno-forecast))
    :config
    (setq weather-metno-location-name "Oslo, Norge"
          weather-metno-location-latitude 59
          weather-metno-location-longitude 10)

    ;; ;; endre stÃ¸rrelse til iconer
    ;; (setq weather-metno-use-imagemagick t)
    ;; (setq weather-metno-get-image-props '(:width 10 :height 10 :ascent center))
    (setq weather-metno-get-image-props '(:ascent center))
    )
#+END_SRC

* Crux
Kompilasi pelbagi fungsi untuk Emacs. [[https://github.com/bbatsov/crux#keybindings][Crux]]
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t
    :bind(
          ("C-a" . crux-move-beginning-of-line)
          ("C-k" . crux-smart-kill-line) ;first kill end of line then kill whole line
          ("C-<backspace>" . crux-kill-line-backwards)
          ("C-c r" . crux-rename-file-and-buffer) ;rename current buffer
          ("C-c k" . crux-kill-other-buffers) ;kill all open buffers but not this
          ("M-n c" . crux-cleanup-buffer-or-region) ;Whitespace-cleanup
          )
    :config
    ;;make a command acting normally on a region to operate on entire buffer
    ;;in the absence of a region
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify))
#+END_SRC

* Windows
** Splitting windows
Seperti =C-x 2= atau =C-x 3= cuma lebih baik
#+BEGIN_SRC emacs-lisp
  (defun ybk/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
        (switch-to-next-buffer)))
  (defun ybk/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))
  (bind-keys ("C-x 2" . ybk/vsplit-last-buffer)
             ("C-x 3" . ybk/hsplit-last-buffer))
#+END_SRC

** Tukar size windows

Aktifkan dengan =C-x += kemudian pakai anak panah.
#+BEGIN_SRC emacs-lisp
  (use-package resize-window
    :ensure t
    :defer 1
    ;; :bind (:map ybk/move-map
    ;;             ("+" . resize-window))
    :bind ("C-x +" . resize-window)
    :config
    (defvar resize-windown-alias-list
      '((right ?f)
        (up ?n)
        (left ?b)
        (down ?p))
      "List of aliases for commands.
  Rather than have to use n, etc, you can alias keys for others."))
#+END_SRC

** Switching windows

Tukarkan ke window atau buffers tertentu bila terdapat window/buffer terbahagi

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
#+END_SRC

Lompat dari window ke window dengan menggunakan =M= kemudian nombor window

#+BEGIN_SRC emacs-lisp
  (use-package winum
    :ensure t
    :defer 1
    :init
    (setq winum-keymap
          (let ((map (make-sparse-keymap)))
            ;; (define-key map (kbd "<f2> w") 'winum-select-window-by-number)
            (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
            (define-key map (kbd "M-1") 'winum-select-window-1)
            (define-key map (kbd "M-2") 'winum-select-window-2)
            (define-key map (kbd "M-3") 'winum-select-window-3)
            (define-key map (kbd "M-4") 'winum-select-window-4)
            (define-key map (kbd "M-5") 'winum-select-window-5)
            (define-key map (kbd "M-6") 'winum-select-window-6)
            (define-key map (kbd "M-7") 'winum-select-window-7)
            (define-key map (kbd "M-8") 'winum-select-window-8)
            map))
    :config
    (winum-mode))
#+END_SRC

** Transposing - perkataan dan window
Untuk tukarkan window layout
#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame
    :ensure t
    :commands (transpose-frame))
  ;;Transpose utk perkataan guna M-t
  (bind-keys :prefix "C-t"
             :prefix-map transpose-map
             ("f" . transpose-frame) 
             ("c" . transpose-chars)
             ("w" . transpose-words)
             ("l" . transpose-lines)
             ("p" . transpose-paragraphs)
             ("s" . transpose-sentences)
             ("x" . transpose-sexps))
#+END_SRC
* Org

Although Org mode ships with Emacs, the latest version can be installed externally. The configuration here follows the [[http://orgmode.org/elpa.html][Org mode ELPA installation instructions]].

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :mode (("\\.txt$" . org-mode)
           ("\\.org$" . org-mode))
    :config
    (setq org-directory "h:/org-mode/")

    ;; use syntax highlighting in org-file code blocks dan guna org code block
    ;; seperti guna di major-mode kode blok tersebut
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t) ; utk completion di src blocks

    ;;== Render subscripts and superscripts in org buffers
    (setq org-pretty-entities-include-sub-superscripts t)

    ;; Allow _ and ^ characters to sub/super-script strings but only when
    ;; string is wrapped in braces
    (setq org-use-sub-superscripts '{}) ; in-buffer rendering
    (setq org-export-with-sub-superscripts nil)
    )
#+END_SRC

On Org mode version 9 I wasn't able to execute source blocks out of the box. [[https://emacs.stackexchange.com/a/28604][Others have ran into the same issue too]]. The solution is to remove the .elc files from the package directory:

#+BEGIN_SRC sh :var ORG_DIR=(let* ((org-v (cadr (split-string (org-version nil t) "@"))) (len (length org-v))) (substring org-v 1 (- len 2)))
rm ${ORG_DIR}/*.elc
#+END_SRC

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
  ;; (setq org-agenda-files
  ;;       (delq nil
  ;;             (mapcar (lambda (x) (and (file-exists-p x) x))
  ;;                     '(concat org-directory "Agenda"))))

  (setq org-agenda-files "h:/org-mode/Agenda/")
#+end_src

*** Org capture

#+begin_src emacs-lisp
  (bind-key "C-c c" 'org-capture)
  (setq org-default-notes-file "h:/org-mode/notes.org")
  (setq org-capture-bookmark nil)
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

*** indent
#+BEGIN_SRC emacs-lisp
  ;;== Indent bila mula
  (setq org-startup-indented t)
#+END_SRC
*** Blank line
#+BEGIN_SRC emacs-lisp
  ;;== Prevent auto insertion of blank lines before headings and list items
  (setq org-blank-before-new-entry '((heading)
                                     (plain-list-item)))
#+END_SRC
** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :ensure t)
#+END_SRC

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (emacs-lisp . t)
     (python . t)
     (C . t)
     (calc . t)
     (latex . t)
     (java . t)
     (ruby . t)
     (lisp . t)
     (scheme . t)
     (shell . t)
     (sqlite . t)
     (js . t)
     (restclient . t)
     (ledger . t)))

  (defun my-org-confirm-babel-evaluate (lang body)
    "Do not confirm evaluation for these languages."
    (not (or (string= lang "C")
             (string= lang "java")
             (string= lang "python")
             (string= lang "R")
             (string= lang "emacs-lisp")
             (string= lang "sqlite"))))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org templates

Source block templates

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist '("r" . "src R"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("md" . "src markdown"))
  (add-to-list 'org-structure-template-alist '("gq" . "src graphql"))
#+END_SRC

** Org exporting

*** Pandoc exporter

Pandoc converts between a huge number of different file formats.

#+begin_src emacs-lisp :tangle no
(use-package ox-pandoc
  :ensure t)
#+end_src

*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter for PDF exporting. By changing the command to `latexmk` references appear in the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+END_SRC
** Code block 
Masukkan code block tanpa pakai =<s [TAB]=
   #+begin_src emacs-lisp
     (defun ybk/org-insert-src-block (src-code-type)
       "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
       (interactive
        (let ((src-code-types
               '("emacs-lisp" "python" "sh" "calc" "R" "latex" "org")))
          (list (ivy-completing-read "Source code type: " src-code-types))))
       (progn
         (newline-and-indent)
         (insert "#+END_SRC\n")
         (previous-line 2)
         (insert (format "#+BEGIN_SRC %s\n" src-code-type))
         (org-edit-src-code)))

     (bind-key "C-c s" #'ybk/org-insert-src-block org-mode-map)
   #+end_src

** Worf
[[https://github.com/abo-abo/worf][Worf]] ialah minor mode utk mempercepatkan process contohnya seperti penggunaan fungsi
=<s Enter= dll. di org-mode. Juga utk melihat list tajuk2 di dalam dokument Aturcara
utk 'Headings' diambil dari [[http://stackoverflow.com/questions/28030946/emacs-org-mode-search-only-headers][Stackoverflow]]. Rujukan utk =Ivy= dan =wolf= di [[http://pragmaticemacs.com/emacs/insert-internal-org-mode-links-the-ivy-way/][sini]]. Banyak fungsi =worf= yang perlu di pelajari

#+BEGIN_SRC emacs-lisp
  (use-package worf
    :init
    (use-package ivy
      :ensure t)
    :ensure t
    :bind (:map ybk/move-map
                ("h" . worf-goto))
    :config

    ;; use ivy to insert a link to a heading in the current document
    ;; based on `worf-goto`
    (defun ybk/worf-insert-internal-link ()
      "Use ivy to insert a link to a heading in the current `org-mode' document. Code is based on `worf-goto'."
      (interactive)
      (let ((cands (worf--goto-candidates)))
        (ivy-read "Heading: " cands
                  :action 'ybk/worf-insert-internal-link-action)))


    (defun ybk/worf-insert-internal-link-action (x)
      "Insert link for `ybk/worf-insert-internal-link'"
      ;; go to heading
      (save-excursion
        (goto-char (cdr x))
        ;; store link
        (call-interactively 'org-store-link)
        )
      ;; return to original point and insert link
      (org-insert-last-stored-link 1)
      ;; org-insert-last-stored-link adds a newline so delete this
      (delete-char 1)))
#+END_SRC
* Expand region 

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  ;; :bind ("C-x C-m" . er/expand-region)
  :config
  (global-set-key (kbd "C-\\") 'er/expand-region))
  #+END_SRC

* Multiple cursor

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  ;; use RETURN to insert newline
  (define-key mc/keymap (kbd "<return>") nil)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

  )
#+END_SRC

* Google-translate
Untuk pakai fungsi =Google Translate= di GNU Emacs. Sila lihat sumber di[[https://github.com/atykhonov/google-translate][sini]]. Sekiranya
bahasa untuk terjemahan tidak seperti yang sedia ada, boleh cari bahasa dengan
menggunakan permulaan =C-u= kemudian fungsi biasa =C-c t=. Pemakaian =C-u= akan mematikan
aturcara yang ditetapkan dan kembali ke asalnya (/default/).

#+BEGIN_SRC emacs-lisp
  (use-package google-translate
    :ensure t
    :bind (("C-c t" . google-translate-at-point)
           :map ybk/org-map
           ("t" . hydra-google-trans/body))
    :init
    ;;Hydra
    (defhydra hydra-google-trans (:color blue
                                         :columns 6)
      "Google-translate"
      ("t" google-translate-smooth-translate "pilih terjemahan")
      ("n" google-translate-at-point "terjemah NO-BI")
      ("b" google-translate-at-point-reverse "terjemah BI-NO")
      ("o" google-translate-query-translate-reverse "perkataan NO-BI")
      ("i" google-translate-query-translate "perkataan BI-NO")
      ("q" nil "keluar")))
#+END_SRC

** Default-UI
Sekiranya bahasa tidak sedia ditetapkan di 'Smooth UI' boleh pilih dari pilihan
pelbagai bahasa. Jika bahasa untuk terjemahan selain dari NO ke BI, boleh matikan
~source-language~ dan ~target-language~.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package google-translate-default-ui
    :ensure google-translate
    ;; :bind (("C-c t p" . google-translate-at-point)
    ;;        ("C-c t o" . google-translate-at-point-reverse)
    ;;        ("C-c t h" . google-translate-query-translate)
    ;;        )
    :init
    ;;sekiranya ingin menetapkan bahasa
    (setq google-translate-default-target-language "no") ;terjemah ke
    (setq google-translate-default-source-language "en") ;terjemah dari
    )
#+END_SRC

** Smooth-UI
Untuk kombinasi pelbagi bahasa. Tukar bahasa untuk terjemah pakai =C-n= atau =C-p=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package google-translate-smooth-ui
    :ensure google-translate
    ;; :bind ("C-c t t" . google-translate-smooth-translate)
    :init
    ;; terjemahan utk dipakai
    (setq google-translate-translation-directions-alist
          '(("en" . "ms")
            ("ms" . "en")
            ("no" . "ms")
            ("ms" . "no")))

    ;; ;; input disabled with source lang is "en" and ybk-blog when lang is "malay" or "norsk"
    ;; (setq google-translate-preferable-input-methods-alist '((nil . ("en"))
    ;;                                                         (ybk-blog . ("ms""no"))))
    )

#+END_SRC

* Code cleanup
Berbagai fungsi untuk bersihkan code
** Electric operator
Electric operator akan menjarakkan ~y=1*3+2~ ke ~y = 1 * 3 + 2~
#+BEGIN_SRC emacs-lisp
  (use-package electric-operator
    :ensure t
    :config
    ;; edit rules for ESS mode
    (electric-operator-add-rules-for-mode 'ess-mode
                                          (cons ":=" " := ")
                                          ;; (cons "%" "%")
                                          (cons "%in%" " %in% ")
                                          (cons "%>%" " %>% "))

    (setq electric-operator-R-named-argument-style 'spaced) ;if unspaced will be f(foo=1)
    (add-hook 'ess-mode-hook #'electric-operator-mode)
    (add-hook 'python-mode-hook #'electric-operator-mode))
#+END_SRC

** Whitespace shows
Tunjukkan whitespace.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f8>") 'whitespace-mode)
#+END_SRC

** Whitespace-cleanup
Akan memakai "whitespace-cleanup" sebelum buffer disimpan (save) smartly sumber
https://github.com/jabranham/emacs/blob/master/emacs.org
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t
    :config
    (ws-butler-global-mode)
    :diminish (ws-butler-mode . ""))
#+END_SRC

** smart-newline
Guna =RET= untuk newline bila buat kode
#+BEGIN_SRC emacs-lisp
  (use-package smart-newline
    :ensure t
    :config
    ;; Aktifkan global
    (smart-newline-mode 1)

    ;; ;; Aktifkan hanya di mode tertentu
    ;; (add-hook 'ess-mode-hook
    ;;           (lambda ()
    ;;             (smart-newline-mode 1)))
    )

#+END_SRC
